//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 8 view controllers.
  struct segue {
    /// This struct is generated for `AlertSettingsViewController`, and contains static references to 2 segues.
    struct alertSettingsViewController {
      /// Segue identifier `alertToNewAlertSettings`.
      static let alertToNewAlertSettings: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AlertSettingsViewController, NewAlertSettingsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "alertToNewAlertSettings")
      /// Segue identifier `unwindToAlertsSettingsViewController`.
      static let unwindToAlertsSettingsViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AlertSettingsViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToAlertsSettingsViewController")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `alertToNewAlertSettings`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func alertToNewAlertSettings(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AlertSettingsViewController, NewAlertSettingsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.alertSettingsViewController.alertToNewAlertSettings, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `unwindToAlertsSettingsViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToAlertsSettingsViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AlertSettingsViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.alertSettingsViewController.unwindToAlertsSettingsViewController, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `AlertTypeSettingsViewController`, and contains static references to 1 segues.
    struct alertTypeSettingsViewController {
      /// Segue identifier `unwindToAlertTypesSettingsViewController`.
      static let unwindToAlertTypesSettingsViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AlertTypeSettingsViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToAlertTypesSettingsViewController")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `unwindToAlertTypesSettingsViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToAlertTypesSettingsViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AlertTypeSettingsViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.alertTypeSettingsViewController.unwindToAlertTypesSettingsViewController, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `AlertTypesSettingsViewController`, and contains static references to 1 segues.
    struct xdripAlertTypesSettingsViewController {
      /// Segue identifier `alertTypesToAlertTypeSettings`.
      static let alertTypesToAlertTypeSettings: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, xdrip.AlertTypesSettingsViewController, AlertTypeSettingsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "alertTypesToAlertTypeSettings")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `alertTypesToAlertTypeSettings`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func alertTypesToAlertTypeSettings(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, xdrip.AlertTypesSettingsViewController, AlertTypeSettingsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.xdripAlertTypesSettingsViewController.alertTypesToAlertTypeSettings, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `AlertsSettingsViewController`, and contains static references to 1 segues.
    struct xdripAlertsSettingsViewController {
      /// Segue identifier `alertsToAlertSettings`.
      static let alertsToAlertSettings: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, xdrip.AlertsSettingsViewController, AlertSettingsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "alertsToAlertSettings")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `alertsToAlertSettings`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func alertsToAlertSettings(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, xdrip.AlertsSettingsViewController, AlertSettingsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.xdripAlertsSettingsViewController.alertsToAlertSettings, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `BluetoothPeripheralsViewController`, and contains static references to 1 segues.
    struct bluetoothPeripheralsViewController {
      /// Segue identifier `BluetoothPeripheralsToBluetoothPeripheralSegueIdentifier`.
      static let bluetoothPeripheralsToBluetoothPeripheralSegueIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, BluetoothPeripheralsViewController, BluetoothPeripheralViewController> = Rswift.StoryboardSegueIdentifier(identifier: "BluetoothPeripheralsToBluetoothPeripheralSegueIdentifier")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `BluetoothPeripheralsToBluetoothPeripheralSegueIdentifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func bluetoothPeripheralsToBluetoothPeripheralSegueIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, BluetoothPeripheralsViewController, BluetoothPeripheralViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.bluetoothPeripheralsViewController.bluetoothPeripheralsToBluetoothPeripheralSegueIdentifier, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `NewAlertSettingsViewController`, and contains static references to 1 segues.
    struct newAlertSettingsViewController {
      /// Segue identifier `unwindToAlertsSettingsViewController`.
      static let unwindToAlertsSettingsViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, NewAlertSettingsViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToAlertsSettingsViewController")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `unwindToAlertsSettingsViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToAlertsSettingsViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, NewAlertSettingsViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.newAlertSettingsViewController.unwindToAlertsSettingsViewController, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `RootViewController`, and contains static references to 2 segues.
    struct rootViewController {
      /// Segue identifier `ChartDetails`.
      static let chartDetails: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RootViewController, ChartDetailsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ChartDetails")
      /// Segue identifier `RootViewToSnoozeView`.
      static let rootViewToSnoozeView: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RootViewController, SnoozeViewController> = Rswift.StoryboardSegueIdentifier(identifier: "RootViewToSnoozeView")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `ChartDetails`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func chartDetails(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RootViewController, ChartDetailsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.rootViewController.chartDetails, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `RootViewToSnoozeView`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func rootViewToSnoozeView(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RootViewController, SnoozeViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.rootViewController.rootViewToSnoozeView, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `SettingsViewController`, and contains static references to 5 segues.
    struct xdripSettingsViewController {
      /// Segue identifier `settingsToAlertSettings`.
      static let settingsToAlertSettings: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, xdrip.SettingsViewController, xdrip.AlertsSettingsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "settingsToAlertSettings")
      /// Segue identifier `settingsToAlertTypeSettings`.
      static let settingsToAlertTypeSettings: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, xdrip.SettingsViewController, xdrip.AlertTypesSettingsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "settingsToAlertTypeSettings")
      /// Segue identifier `settingsToM5StackSettings`.
      static let settingsToM5StackSettings: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, xdrip.SettingsViewController, xdrip.M5StackSettingsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "settingsToM5StackSettings")
      /// Segue identifier `settingsToMore`.
      static let settingsToMore: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, xdrip.SettingsViewController, MoreSettingsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "settingsToMore")
      /// Segue identifier `settingsToSchedule`.
      static let settingsToSchedule: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, xdrip.SettingsViewController, TimeScheduleViewController> = Rswift.StoryboardSegueIdentifier(identifier: "settingsToSchedule")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `settingsToAlertSettings`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func settingsToAlertSettings(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, xdrip.SettingsViewController, xdrip.AlertsSettingsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.xdripSettingsViewController.settingsToAlertSettings, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `settingsToAlertTypeSettings`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func settingsToAlertTypeSettings(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, xdrip.SettingsViewController, xdrip.AlertTypesSettingsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.xdripSettingsViewController.settingsToAlertTypeSettings, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `settingsToM5StackSettings`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func settingsToM5StackSettings(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, xdrip.SettingsViewController, xdrip.M5StackSettingsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.xdripSettingsViewController.settingsToM5StackSettings, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `settingsToMore`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func settingsToMore(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, xdrip.SettingsViewController, MoreSettingsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.xdripSettingsViewController.settingsToMore, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `settingsToSchedule`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func settingsToSchedule(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, xdrip.SettingsViewController, TimeScheduleViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.xdripSettingsViewController.settingsToSchedule, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.entitlements` struct is generated, and contains static references to 3 properties.
  struct entitlements {
    static let comAppleDeveloperHealthkit = true

    struct comAppleDeveloperNfcReadersessionFormats {
      static let taG = infoPlistString(path: ["com.apple.developer.nfc.readersession.formats"], key: "TAG") ?? "TAG"

      fileprivate init() {}
    }

    struct comAppleSecurityApplicationGroups {
      static let groupComDEVELOPMENT_TEAMLoopkitLoopGroup = infoPlistString(path: ["com.apple.security.application-groups"], key: "group.com.${DEVELOPMENT_TEAM}.loopkit.LoopGroup") ?? "group.com.${DEVELOPMENT_TEAM}.loopkit.LoopGroup"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 125 files.
  struct file {
    /// Resource file `1-millisecond-of-silence.mp3`.
    static let millisecondOfSilenceMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "1-millisecond-of-silence", pathExtension: "mp3")
    /// Resource file `20ms-of-silence.caf`.
    static let msOfSilenceCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "20ms-of-silence", pathExtension: "caf")
    /// Resource file `Alarm_Buzzer.caf`.
    static let alarm_BuzzerCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Alarm_Buzzer", pathExtension: "caf")
    /// Resource file `Alarm_Clock.caf`.
    static let alarm_ClockCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Alarm_Clock", pathExtension: "caf")
    /// Resource file `Alert_Tone_Busy.caf`.
    static let alert_Tone_BusyCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Alert_Tone_Busy", pathExtension: "caf")
    /// Resource file `Alert_Tone_Ringtone_1.caf`.
    static let alert_Tone_Ringtone_1Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "Alert_Tone_Ringtone_1", pathExtension: "caf")
    /// Resource file `Alert_Tone_Ringtone_2.caf`.
    static let alert_Tone_Ringtone_2Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "Alert_Tone_Ringtone_2", pathExtension: "caf")
    /// Resource file `Alien_Siren.caf`.
    static let alien_SirenCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Alien_Siren", pathExtension: "caf")
    /// Resource file `Ambulance.caf`.
    static let ambulanceCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Ambulance", pathExtension: "caf")
    /// Resource file `Analog_Watch_Alarm.caf`.
    static let analog_Watch_AlarmCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Analog_Watch_Alarm", pathExtension: "caf")
    /// Resource file `Big_Clock_Ticking.caf`.
    static let big_Clock_TickingCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Big_Clock_Ticking", pathExtension: "caf")
    /// Resource file `Burglar_Alarm_Siren_1.caf`.
    static let burglar_Alarm_Siren_1Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "Burglar_Alarm_Siren_1", pathExtension: "caf")
    /// Resource file `Burglar_Alarm_Siren_2.caf`.
    static let burglar_Alarm_Siren_2Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "Burglar_Alarm_Siren_2", pathExtension: "caf")
    /// Resource file `CSFX-2_Alarm.caf`.
    static let csfx2_AlarmCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "CSFX-2_Alarm", pathExtension: "caf")
    /// Resource file `Cartoon_Ascend_Climb_Sneaky.caf`.
    static let cartoon_Ascend_Climb_SneakyCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cartoon_Ascend_Climb_Sneaky", pathExtension: "caf")
    /// Resource file `Cartoon_Ascend_Then_Descend.caf`.
    static let cartoon_Ascend_Then_DescendCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cartoon_Ascend_Then_Descend", pathExtension: "caf")
    /// Resource file `Cartoon_Bounce_To_Ceiling.caf`.
    static let cartoon_Bounce_To_CeilingCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cartoon_Bounce_To_Ceiling", pathExtension: "caf")
    /// Resource file `Cartoon_Dreamy_Glissando_Harp.caf`.
    static let cartoon_Dreamy_Glissando_HarpCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cartoon_Dreamy_Glissando_Harp", pathExtension: "caf")
    /// Resource file `Cartoon_Fail_Strings_Trumpet.caf`.
    static let cartoon_Fail_Strings_TrumpetCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cartoon_Fail_Strings_Trumpet", pathExtension: "caf")
    /// Resource file `Cartoon_Machine_Clumsy_Loop.caf`.
    static let cartoon_Machine_Clumsy_LoopCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cartoon_Machine_Clumsy_Loop", pathExtension: "caf")
    /// Resource file `Cartoon_Siren.caf`.
    static let cartoon_SirenCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cartoon_Siren", pathExtension: "caf")
    /// Resource file `Cartoon_Tip_Toe_Sneaky_Walk.caf`.
    static let cartoon_Tip_Toe_Sneaky_WalkCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cartoon_Tip_Toe_Sneaky_Walk", pathExtension: "caf")
    /// Resource file `Cartoon_Uh_Oh.caf`.
    static let cartoon_Uh_OhCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cartoon_Uh_Oh", pathExtension: "caf")
    /// Resource file `Cartoon_Villain_Horns.caf`.
    static let cartoon_Villain_HornsCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cartoon_Villain_Horns", pathExtension: "caf")
    /// Resource file `Cell_Phone_Ring_Tone.caf`.
    static let cell_Phone_Ring_ToneCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cell_Phone_Ring_Tone", pathExtension: "caf")
    /// Resource file `Chimes_Glassy.caf`.
    static let chimes_GlassyCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Chimes_Glassy", pathExtension: "caf")
    /// Resource file `Computer_Magic.caf`.
    static let computer_MagicCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Computer_Magic", pathExtension: "caf")
    /// Resource file `Cuckoo_Clock.caf`.
    static let cuckoo_ClockCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cuckoo_Clock", pathExtension: "caf")
    /// Resource file `Dhol_Shuffleloop.caf`.
    static let dhol_ShuffleloopCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Dhol_Shuffleloop", pathExtension: "caf")
    /// Resource file `Discreet.caf`.
    static let discreetCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Discreet", pathExtension: "caf")
    /// Resource file `Early_Sunrise.caf`.
    static let early_SunriseCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Early_Sunrise", pathExtension: "caf")
    /// Resource file `Emergency_Alarm.caf`.
    static let emergency_AlarmCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Emergency_Alarm", pathExtension: "caf")
    /// Resource file `Emergency_Alarm_Carbon_Monoxide.caf`.
    static let emergency_Alarm_Carbon_MonoxideCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Emergency_Alarm_Carbon_Monoxide", pathExtension: "caf")
    /// Resource file `Emergency_Alarm_Siren.caf`.
    static let emergency_Alarm_SirenCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Emergency_Alarm_Siren", pathExtension: "caf")
    /// Resource file `Ending_Reached.caf`.
    static let ending_ReachedCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Ending_Reached", pathExtension: "caf")
    /// Resource file `Fly.caf`.
    static let flyCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Fly", pathExtension: "caf")
    /// Resource file `Ghost_Hover.caf`.
    static let ghost_HoverCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Ghost_Hover", pathExtension: "caf")
    /// Resource file `Good_Morning.caf`.
    static let good_MorningCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Good_Morning", pathExtension: "caf")
    /// Resource file `Hell_Yeah_Somewhat_Calmer.caf`.
    static let hell_Yeah_Somewhat_CalmerCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Hell_Yeah_Somewhat_Calmer", pathExtension: "caf")
    /// Resource file `In_A_Hurry.caf`.
    static let in_A_HurryCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "In_A_Hurry", pathExtension: "caf")
    /// Resource file `Indeed.caf`.
    static let indeedCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Indeed", pathExtension: "caf")
    /// Resource file `Insistently.caf`.
    static let insistentlyCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Insistently", pathExtension: "caf")
    /// Resource file `Jingle_All_The_Way.caf`.
    static let jingle_All_The_WayCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Jingle_All_The_Way", pathExtension: "caf")
    /// Resource file `Laser_Shoot.caf`.
    static let laser_ShootCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Laser_Shoot", pathExtension: "caf")
    /// Resource file `Machine_Charge.caf`.
    static let machine_ChargeCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Machine_Charge", pathExtension: "caf")
    /// Resource file `Magical_Twinkle.caf`.
    static let magical_TwinkleCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Magical_Twinkle", pathExtension: "caf")
    /// Resource file `Marching_Heavy_Footed_Fat_Elephants.caf`.
    static let marching_Heavy_Footed_Fat_ElephantsCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Marching_Heavy_Footed_Fat_Elephants", pathExtension: "caf")
    /// Resource file `Marimba_Descend.caf`.
    static let marimba_DescendCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Marimba_Descend", pathExtension: "caf")
    /// Resource file `Marimba_Flutter_or_Shake.caf`.
    static let marimba_Flutter_or_ShakeCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Marimba_Flutter_or_Shake", pathExtension: "caf")
    /// Resource file `Martian_Gun.caf`.
    static let martian_GunCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Martian_Gun", pathExtension: "caf")
    /// Resource file `Martian_Scanner.caf`.
    static let martian_ScannerCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Martian_Scanner", pathExtension: "caf")
    /// Resource file `Metallic.caf`.
    static let metallicCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Metallic", pathExtension: "caf")
    /// Resource file `Nightguard.caf`.
    static let nightguardCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nightguard", pathExtension: "caf")
    /// Resource file `Not_Kiddin.caf`.
    static let not_KiddinCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Not_Kiddin", pathExtension: "caf")
    /// Resource file `Open_Your_Eyes_And_See.caf`.
    static let open_Your_Eyes_And_SeeCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Open_Your_Eyes_And_See", pathExtension: "caf")
    /// Resource file `Orchestral_Horns.caf`.
    static let orchestral_HornsCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Orchestral_Horns", pathExtension: "caf")
    /// Resource file `Oringz.caf`.
    static let oringzCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Oringz", pathExtension: "caf")
    /// Resource file `Pager_Beeps.caf`.
    static let pager_BeepsCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Pager_Beeps", pathExtension: "caf")
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `Remembers_Me_Of_Asia.caf`.
    static let remembers_Me_Of_AsiaCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Remembers_Me_Of_Asia", pathExtension: "caf")
    /// Resource file `Rise_And_Shine.caf`.
    static let rise_And_ShineCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rise_And_Shine", pathExtension: "caf")
    /// Resource file `Rush.caf`.
    static let rushCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rush", pathExtension: "caf")
    /// Resource file `Sci-Fi_Air_Raid_Alarm.caf`.
    static let sciFi_Air_Raid_AlarmCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Sci-Fi_Air_Raid_Alarm", pathExtension: "caf")
    /// Resource file `Sci-Fi_Alarm.caf`.
    static let sciFi_AlarmCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Sci-Fi_Alarm", pathExtension: "caf")
    /// Resource file `Sci-Fi_Alarm_Loop_1.caf`.
    static let sciFi_Alarm_Loop_1Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "Sci-Fi_Alarm_Loop_1", pathExtension: "caf")
    /// Resource file `Sci-Fi_Alarm_Loop_2.caf`.
    static let sciFi_Alarm_Loop_2Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "Sci-Fi_Alarm_Loop_2", pathExtension: "caf")
    /// Resource file `Sci-Fi_Alarm_Loop_3.caf`.
    static let sciFi_Alarm_Loop_3Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "Sci-Fi_Alarm_Loop_3", pathExtension: "caf")
    /// Resource file `Sci-Fi_Alarm_Loop_4.caf`.
    static let sciFi_Alarm_Loop_4Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "Sci-Fi_Alarm_Loop_4", pathExtension: "caf")
    /// Resource file `Sci-Fi_Computer_Console_Alarm.caf`.
    static let sciFi_Computer_Console_AlarmCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Sci-Fi_Computer_Console_Alarm", pathExtension: "caf")
    /// Resource file `Sci-Fi_Console_Alarm.caf`.
    static let sciFi_Console_AlarmCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Sci-Fi_Console_Alarm", pathExtension: "caf")
    /// Resource file `Sci-Fi_Eerie_Alarm.caf`.
    static let sciFi_Eerie_AlarmCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Sci-Fi_Eerie_Alarm", pathExtension: "caf")
    /// Resource file `Sci-Fi_Engine_Shut_Down.caf`.
    static let sciFi_Engine_Shut_DownCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Sci-Fi_Engine_Shut_Down", pathExtension: "caf")
    /// Resource file `Sci-Fi_Incoming_Message_Alert.caf`.
    static let sciFi_Incoming_Message_AlertCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Sci-Fi_Incoming_Message_Alert", pathExtension: "caf")
    /// Resource file `Sci-Fi_Spaceship_Message.caf`.
    static let sciFi_Spaceship_MessageCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Sci-Fi_Spaceship_Message", pathExtension: "caf")
    /// Resource file `Sci-Fi_Spaceship_Warm_Up.caf`.
    static let sciFi_Spaceship_Warm_UpCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Sci-Fi_Spaceship_Warm_Up", pathExtension: "caf")
    /// Resource file `Sci-Fi_Warning.caf`.
    static let sciFi_WarningCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Sci-Fi_Warning", pathExtension: "caf")
    /// Resource file `Signature_Corporate.caf`.
    static let signature_CorporateCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Signature_Corporate", pathExtension: "caf")
    /// Resource file `Siri_Alert_Calibration_Needed.caf`.
    static let siri_Alert_Calibration_NeededCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_Alert_Calibration_Needed", pathExtension: "caf")
    /// Resource file `Siri_Alert_Device_Muted.caf`.
    static let siri_Alert_Device_MutedCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_Alert_Device_Muted", pathExtension: "caf")
    /// Resource file `Siri_Alert_Glucose_Dropping_Fast.caf`.
    static let siri_Alert_Glucose_Dropping_FastCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_Alert_Glucose_Dropping_Fast", pathExtension: "caf")
    /// Resource file `Siri_Alert_Glucose_Rising_Fast.caf`.
    static let siri_Alert_Glucose_Rising_FastCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_Alert_Glucose_Rising_Fast", pathExtension: "caf")
    /// Resource file `Siri_Alert_High_Glucose.caf`.
    static let siri_Alert_High_GlucoseCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_Alert_High_Glucose", pathExtension: "caf")
    /// Resource file `Siri_Alert_Low_Glucose.caf`.
    static let siri_Alert_Low_GlucoseCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_Alert_Low_Glucose", pathExtension: "caf")
    /// Resource file `Siri_Alert_Missed_Readings.caf`.
    static let siri_Alert_Missed_ReadingsCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_Alert_Missed_Readings", pathExtension: "caf")
    /// Resource file `Siri_Alert_Transmitter_Battery_Low.caf`.
    static let siri_Alert_Transmitter_Battery_LowCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_Alert_Transmitter_Battery_Low", pathExtension: "caf")
    /// Resource file `Siri_Alert_Urgent_High_Glucose.caf`.
    static let siri_Alert_Urgent_High_GlucoseCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_Alert_Urgent_High_Glucose", pathExtension: "caf")
    /// Resource file `Siri_Alert_Urgent_Low_Glucose.caf`.
    static let siri_Alert_Urgent_Low_GlucoseCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_Alert_Urgent_Low_Glucose", pathExtension: "caf")
    /// Resource file `Siri_Calibration_Needed.caf`.
    static let siri_Calibration_NeededCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_Calibration_Needed", pathExtension: "caf")
    /// Resource file `Siri_Device_Muted.caf`.
    static let siri_Device_MutedCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_Device_Muted", pathExtension: "caf")
    /// Resource file `Siri_Glucose_Dropping_Fast.caf`.
    static let siri_Glucose_Dropping_FastCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_Glucose_Dropping_Fast", pathExtension: "caf")
    /// Resource file `Siri_Glucose_Rising_Fast.caf`.
    static let siri_Glucose_Rising_FastCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_Glucose_Rising_Fast", pathExtension: "caf")
    /// Resource file `Siri_High_Glucose.caf`.
    static let siri_High_GlucoseCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_High_Glucose", pathExtension: "caf")
    /// Resource file `Siri_Low_Glucose.caf`.
    static let siri_Low_GlucoseCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_Low_Glucose", pathExtension: "caf")
    /// Resource file `Siri_Missed_Readings.caf`.
    static let siri_Missed_ReadingsCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_Missed_Readings", pathExtension: "caf")
    /// Resource file `Siri_Transmitter_Battery_Low.caf`.
    static let siri_Transmitter_Battery_LowCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_Transmitter_Battery_Low", pathExtension: "caf")
    /// Resource file `Siri_Urgent_High_Glucose.caf`.
    static let siri_Urgent_High_GlucoseCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_Urgent_High_Glucose", pathExtension: "caf")
    /// Resource file `Siri_Urgent_Low_Glucose.caf`.
    static let siri_Urgent_Low_GlucoseCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Siri_Urgent_Low_Glucose", pathExtension: "caf")
    /// Resource file `Soft_Marimba_Pad_Positive.caf`.
    static let soft_Marimba_Pad_PositiveCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Soft_Marimba_Pad_Positive", pathExtension: "caf")
    /// Resource file `Soft_Warm_Airy_Optimistic.caf`.
    static let soft_Warm_Airy_OptimisticCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Soft_Warm_Airy_Optimistic", pathExtension: "caf")
    /// Resource file `Soft_Warm_Airy_Reassuring.caf`.
    static let soft_Warm_Airy_ReassuringCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Soft_Warm_Airy_Reassuring", pathExtension: "caf")
    /// Resource file `Store_Door_Chime.caf`.
    static let store_Door_ChimeCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Store_Door_Chime", pathExtension: "caf")
    /// Resource file `Sunny.caf`.
    static let sunnyCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Sunny", pathExtension: "caf")
    /// Resource file `Thunder_Sound_FX.caf`.
    static let thunder_Sound_FXCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Thunder_Sound_FX", pathExtension: "caf")
    /// Resource file `Time_Has_Come.caf`.
    static let time_Has_ComeCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Time_Has_Come", pathExtension: "caf")
    /// Resource file `Tornado_Siren.caf`.
    static let tornado_SirenCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Tornado_Siren", pathExtension: "caf")
    /// Resource file `Two_Turtle_Doves.caf`.
    static let two_Turtle_DovesCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Two_Turtle_Doves", pathExtension: "caf")
    /// Resource file `Unpaved.caf`.
    static let unpavedCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Unpaved", pathExtension: "caf")
    /// Resource file `Wake_Up_Will_You.caf`.
    static let wake_Up_Will_YouCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Wake_Up_Will_You", pathExtension: "caf")
    /// Resource file `Win_Gain.caf`.
    static let win_GainCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Win_Gain", pathExtension: "caf")
    /// Resource file `Wrong_Answer.caf`.
    static let wrong_AnswerCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "Wrong_Answer", pathExtension: "caf")
    /// Resource file `betterwakeup.mp3`.
    static let betterwakeupMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "betterwakeup", pathExtension: "mp3")
    /// Resource file `bruteforce.mp3`.
    static let bruteforceMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "bruteforce", pathExtension: "mp3")
    /// Resource file `logo-launchScreen@3x.png`.
    static let logoLaunchScreen3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "logo-launchScreen@3x", pathExtension: "png")
    /// Resource file `modern2.mp3`.
    static let modern2Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "modern2", pathExtension: "mp3")
    /// Resource file `modernalarm.mp3`.
    static let modernalarmMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "modernalarm", pathExtension: "mp3")
    /// Resource file `shorthigh1.mp3`.
    static let shorthigh1Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "shorthigh1", pathExtension: "mp3")
    /// Resource file `shorthigh2.mp3`.
    static let shorthigh2Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "shorthigh2", pathExtension: "mp3")
    /// Resource file `shorthigh3.mp3`.
    static let shorthigh3Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "shorthigh3", pathExtension: "mp3")
    /// Resource file `shorthigh4.mp3`.
    static let shorthigh4Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "shorthigh4", pathExtension: "mp3")
    /// Resource file `shortlow1.mp3`.
    static let shortlow1Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "shortlow1", pathExtension: "mp3")
    /// Resource file `shortlow2.mp3`.
    static let shortlow2Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "shortlow2", pathExtension: "mp3")
    /// Resource file `shortlow3.mp3`.
    static let shortlow3Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "shortlow3", pathExtension: "mp3")
    /// Resource file `shortlow4.mp3`.
    static let shortlow4Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "shortlow4", pathExtension: "mp3")
    /// Resource file `spaceship.mp3`.
    static let spaceshipMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "spaceship", pathExtension: "mp3")
    /// Resource file `xdripalert.aif`.
    static let xdripalertAif = Rswift.FileResource(bundle: R.hostingBundle, name: "xdripalert", pathExtension: "aif")

    /// `bundle.url(forResource: "1-millisecond-of-silence", withExtension: "mp3")`
    static func millisecondOfSilenceMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.millisecondOfSilenceMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "20ms-of-silence", withExtension: "caf")`
    static func msOfSilenceCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.msOfSilenceCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Alarm_Buzzer", withExtension: "caf")`
    static func alarm_BuzzerCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alarm_BuzzerCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Alarm_Clock", withExtension: "caf")`
    static func alarm_ClockCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alarm_ClockCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Alert_Tone_Busy", withExtension: "caf")`
    static func alert_Tone_BusyCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alert_Tone_BusyCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Alert_Tone_Ringtone_1", withExtension: "caf")`
    static func alert_Tone_Ringtone_1Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alert_Tone_Ringtone_1Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Alert_Tone_Ringtone_2", withExtension: "caf")`
    static func alert_Tone_Ringtone_2Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alert_Tone_Ringtone_2Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Alien_Siren", withExtension: "caf")`
    static func alien_SirenCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alien_SirenCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Ambulance", withExtension: "caf")`
    static func ambulanceCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ambulanceCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Analog_Watch_Alarm", withExtension: "caf")`
    static func analog_Watch_AlarmCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.analog_Watch_AlarmCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Big_Clock_Ticking", withExtension: "caf")`
    static func big_Clock_TickingCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.big_Clock_TickingCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Burglar_Alarm_Siren_1", withExtension: "caf")`
    static func burglar_Alarm_Siren_1Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.burglar_Alarm_Siren_1Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Burglar_Alarm_Siren_2", withExtension: "caf")`
    static func burglar_Alarm_Siren_2Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.burglar_Alarm_Siren_2Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "CSFX-2_Alarm", withExtension: "caf")`
    static func csfx2_AlarmCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.csfx2_AlarmCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cartoon_Ascend_Climb_Sneaky", withExtension: "caf")`
    static func cartoon_Ascend_Climb_SneakyCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cartoon_Ascend_Climb_SneakyCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cartoon_Ascend_Then_Descend", withExtension: "caf")`
    static func cartoon_Ascend_Then_DescendCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cartoon_Ascend_Then_DescendCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cartoon_Bounce_To_Ceiling", withExtension: "caf")`
    static func cartoon_Bounce_To_CeilingCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cartoon_Bounce_To_CeilingCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cartoon_Dreamy_Glissando_Harp", withExtension: "caf")`
    static func cartoon_Dreamy_Glissando_HarpCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cartoon_Dreamy_Glissando_HarpCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cartoon_Fail_Strings_Trumpet", withExtension: "caf")`
    static func cartoon_Fail_Strings_TrumpetCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cartoon_Fail_Strings_TrumpetCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cartoon_Machine_Clumsy_Loop", withExtension: "caf")`
    static func cartoon_Machine_Clumsy_LoopCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cartoon_Machine_Clumsy_LoopCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cartoon_Siren", withExtension: "caf")`
    static func cartoon_SirenCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cartoon_SirenCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cartoon_Tip_Toe_Sneaky_Walk", withExtension: "caf")`
    static func cartoon_Tip_Toe_Sneaky_WalkCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cartoon_Tip_Toe_Sneaky_WalkCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cartoon_Uh_Oh", withExtension: "caf")`
    static func cartoon_Uh_OhCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cartoon_Uh_OhCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cartoon_Villain_Horns", withExtension: "caf")`
    static func cartoon_Villain_HornsCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cartoon_Villain_HornsCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cell_Phone_Ring_Tone", withExtension: "caf")`
    static func cell_Phone_Ring_ToneCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cell_Phone_Ring_ToneCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Chimes_Glassy", withExtension: "caf")`
    static func chimes_GlassyCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.chimes_GlassyCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Computer_Magic", withExtension: "caf")`
    static func computer_MagicCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.computer_MagicCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cuckoo_Clock", withExtension: "caf")`
    static func cuckoo_ClockCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cuckoo_ClockCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Dhol_Shuffleloop", withExtension: "caf")`
    static func dhol_ShuffleloopCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dhol_ShuffleloopCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Discreet", withExtension: "caf")`
    static func discreetCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.discreetCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Early_Sunrise", withExtension: "caf")`
    static func early_SunriseCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.early_SunriseCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Emergency_Alarm", withExtension: "caf")`
    static func emergency_AlarmCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.emergency_AlarmCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Emergency_Alarm_Carbon_Monoxide", withExtension: "caf")`
    static func emergency_Alarm_Carbon_MonoxideCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.emergency_Alarm_Carbon_MonoxideCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Emergency_Alarm_Siren", withExtension: "caf")`
    static func emergency_Alarm_SirenCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.emergency_Alarm_SirenCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Ending_Reached", withExtension: "caf")`
    static func ending_ReachedCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ending_ReachedCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Fly", withExtension: "caf")`
    static func flyCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.flyCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Ghost_Hover", withExtension: "caf")`
    static func ghost_HoverCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ghost_HoverCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Good_Morning", withExtension: "caf")`
    static func good_MorningCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.good_MorningCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Hell_Yeah_Somewhat_Calmer", withExtension: "caf")`
    static func hell_Yeah_Somewhat_CalmerCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hell_Yeah_Somewhat_CalmerCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "In_A_Hurry", withExtension: "caf")`
    static func in_A_HurryCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.in_A_HurryCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Indeed", withExtension: "caf")`
    static func indeedCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.indeedCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Insistently", withExtension: "caf")`
    static func insistentlyCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.insistentlyCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Jingle_All_The_Way", withExtension: "caf")`
    static func jingle_All_The_WayCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jingle_All_The_WayCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Laser_Shoot", withExtension: "caf")`
    static func laser_ShootCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.laser_ShootCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Machine_Charge", withExtension: "caf")`
    static func machine_ChargeCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.machine_ChargeCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Magical_Twinkle", withExtension: "caf")`
    static func magical_TwinkleCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.magical_TwinkleCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Marching_Heavy_Footed_Fat_Elephants", withExtension: "caf")`
    static func marching_Heavy_Footed_Fat_ElephantsCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.marching_Heavy_Footed_Fat_ElephantsCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Marimba_Descend", withExtension: "caf")`
    static func marimba_DescendCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.marimba_DescendCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Marimba_Flutter_or_Shake", withExtension: "caf")`
    static func marimba_Flutter_or_ShakeCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.marimba_Flutter_or_ShakeCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Martian_Gun", withExtension: "caf")`
    static func martian_GunCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.martian_GunCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Martian_Scanner", withExtension: "caf")`
    static func martian_ScannerCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.martian_ScannerCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Metallic", withExtension: "caf")`
    static func metallicCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.metallicCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nightguard", withExtension: "caf")`
    static func nightguardCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nightguardCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Not_Kiddin", withExtension: "caf")`
    static func not_KiddinCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.not_KiddinCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Open_Your_Eyes_And_See", withExtension: "caf")`
    static func open_Your_Eyes_And_SeeCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.open_Your_Eyes_And_SeeCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Orchestral_Horns", withExtension: "caf")`
    static func orchestral_HornsCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.orchestral_HornsCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Oringz", withExtension: "caf")`
    static func oringzCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.oringzCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Pager_Beeps", withExtension: "caf")`
    static func pager_BeepsCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pager_BeepsCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Remembers_Me_Of_Asia", withExtension: "caf")`
    static func remembers_Me_Of_AsiaCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.remembers_Me_Of_AsiaCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rise_And_Shine", withExtension: "caf")`
    static func rise_And_ShineCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rise_And_ShineCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rush", withExtension: "caf")`
    static func rushCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rushCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sci-Fi_Air_Raid_Alarm", withExtension: "caf")`
    static func sciFi_Air_Raid_AlarmCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sciFi_Air_Raid_AlarmCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sci-Fi_Alarm", withExtension: "caf")`
    static func sciFi_AlarmCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sciFi_AlarmCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sci-Fi_Alarm_Loop_1", withExtension: "caf")`
    static func sciFi_Alarm_Loop_1Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sciFi_Alarm_Loop_1Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sci-Fi_Alarm_Loop_2", withExtension: "caf")`
    static func sciFi_Alarm_Loop_2Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sciFi_Alarm_Loop_2Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sci-Fi_Alarm_Loop_3", withExtension: "caf")`
    static func sciFi_Alarm_Loop_3Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sciFi_Alarm_Loop_3Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sci-Fi_Alarm_Loop_4", withExtension: "caf")`
    static func sciFi_Alarm_Loop_4Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sciFi_Alarm_Loop_4Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sci-Fi_Computer_Console_Alarm", withExtension: "caf")`
    static func sciFi_Computer_Console_AlarmCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sciFi_Computer_Console_AlarmCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sci-Fi_Console_Alarm", withExtension: "caf")`
    static func sciFi_Console_AlarmCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sciFi_Console_AlarmCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sci-Fi_Eerie_Alarm", withExtension: "caf")`
    static func sciFi_Eerie_AlarmCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sciFi_Eerie_AlarmCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sci-Fi_Engine_Shut_Down", withExtension: "caf")`
    static func sciFi_Engine_Shut_DownCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sciFi_Engine_Shut_DownCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sci-Fi_Incoming_Message_Alert", withExtension: "caf")`
    static func sciFi_Incoming_Message_AlertCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sciFi_Incoming_Message_AlertCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sci-Fi_Spaceship_Message", withExtension: "caf")`
    static func sciFi_Spaceship_MessageCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sciFi_Spaceship_MessageCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sci-Fi_Spaceship_Warm_Up", withExtension: "caf")`
    static func sciFi_Spaceship_Warm_UpCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sciFi_Spaceship_Warm_UpCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sci-Fi_Warning", withExtension: "caf")`
    static func sciFi_WarningCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sciFi_WarningCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Signature_Corporate", withExtension: "caf")`
    static func signature_CorporateCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.signature_CorporateCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_Alert_Calibration_Needed", withExtension: "caf")`
    static func siri_Alert_Calibration_NeededCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_Alert_Calibration_NeededCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_Alert_Device_Muted", withExtension: "caf")`
    static func siri_Alert_Device_MutedCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_Alert_Device_MutedCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_Alert_Glucose_Dropping_Fast", withExtension: "caf")`
    static func siri_Alert_Glucose_Dropping_FastCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_Alert_Glucose_Dropping_FastCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_Alert_Glucose_Rising_Fast", withExtension: "caf")`
    static func siri_Alert_Glucose_Rising_FastCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_Alert_Glucose_Rising_FastCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_Alert_High_Glucose", withExtension: "caf")`
    static func siri_Alert_High_GlucoseCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_Alert_High_GlucoseCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_Alert_Low_Glucose", withExtension: "caf")`
    static func siri_Alert_Low_GlucoseCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_Alert_Low_GlucoseCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_Alert_Missed_Readings", withExtension: "caf")`
    static func siri_Alert_Missed_ReadingsCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_Alert_Missed_ReadingsCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_Alert_Transmitter_Battery_Low", withExtension: "caf")`
    static func siri_Alert_Transmitter_Battery_LowCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_Alert_Transmitter_Battery_LowCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_Alert_Urgent_High_Glucose", withExtension: "caf")`
    static func siri_Alert_Urgent_High_GlucoseCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_Alert_Urgent_High_GlucoseCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_Alert_Urgent_Low_Glucose", withExtension: "caf")`
    static func siri_Alert_Urgent_Low_GlucoseCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_Alert_Urgent_Low_GlucoseCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_Calibration_Needed", withExtension: "caf")`
    static func siri_Calibration_NeededCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_Calibration_NeededCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_Device_Muted", withExtension: "caf")`
    static func siri_Device_MutedCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_Device_MutedCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_Glucose_Dropping_Fast", withExtension: "caf")`
    static func siri_Glucose_Dropping_FastCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_Glucose_Dropping_FastCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_Glucose_Rising_Fast", withExtension: "caf")`
    static func siri_Glucose_Rising_FastCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_Glucose_Rising_FastCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_High_Glucose", withExtension: "caf")`
    static func siri_High_GlucoseCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_High_GlucoseCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_Low_Glucose", withExtension: "caf")`
    static func siri_Low_GlucoseCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_Low_GlucoseCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_Missed_Readings", withExtension: "caf")`
    static func siri_Missed_ReadingsCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_Missed_ReadingsCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_Transmitter_Battery_Low", withExtension: "caf")`
    static func siri_Transmitter_Battery_LowCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_Transmitter_Battery_LowCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_Urgent_High_Glucose", withExtension: "caf")`
    static func siri_Urgent_High_GlucoseCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_Urgent_High_GlucoseCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Siri_Urgent_Low_Glucose", withExtension: "caf")`
    static func siri_Urgent_Low_GlucoseCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siri_Urgent_Low_GlucoseCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Soft_Marimba_Pad_Positive", withExtension: "caf")`
    static func soft_Marimba_Pad_PositiveCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.soft_Marimba_Pad_PositiveCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Soft_Warm_Airy_Optimistic", withExtension: "caf")`
    static func soft_Warm_Airy_OptimisticCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.soft_Warm_Airy_OptimisticCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Soft_Warm_Airy_Reassuring", withExtension: "caf")`
    static func soft_Warm_Airy_ReassuringCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.soft_Warm_Airy_ReassuringCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Store_Door_Chime", withExtension: "caf")`
    static func store_Door_ChimeCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.store_Door_ChimeCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sunny", withExtension: "caf")`
    static func sunnyCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sunnyCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Thunder_Sound_FX", withExtension: "caf")`
    static func thunder_Sound_FXCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.thunder_Sound_FXCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Time_Has_Come", withExtension: "caf")`
    static func time_Has_ComeCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.time_Has_ComeCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Tornado_Siren", withExtension: "caf")`
    static func tornado_SirenCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tornado_SirenCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Two_Turtle_Doves", withExtension: "caf")`
    static func two_Turtle_DovesCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.two_Turtle_DovesCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Unpaved", withExtension: "caf")`
    static func unpavedCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.unpavedCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Wake_Up_Will_You", withExtension: "caf")`
    static func wake_Up_Will_YouCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.wake_Up_Will_YouCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Win_Gain", withExtension: "caf")`
    static func win_GainCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.win_GainCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Wrong_Answer", withExtension: "caf")`
    static func wrong_AnswerCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.wrong_AnswerCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "betterwakeup", withExtension: "mp3")`
    static func betterwakeupMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.betterwakeupMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bruteforce", withExtension: "mp3")`
    static func bruteforceMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bruteforceMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "logo-launchScreen@3x", withExtension: "png")`
    static func logoLaunchScreen3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.logoLaunchScreen3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "modern2", withExtension: "mp3")`
    static func modern2Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.modern2Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "modernalarm", withExtension: "mp3")`
    static func modernalarmMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.modernalarmMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "shorthigh1", withExtension: "mp3")`
    static func shorthigh1Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shorthigh1Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "shorthigh2", withExtension: "mp3")`
    static func shorthigh2Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shorthigh2Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "shorthigh3", withExtension: "mp3")`
    static func shorthigh3Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shorthigh3Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "shorthigh4", withExtension: "mp3")`
    static func shorthigh4Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shorthigh4Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "shortlow1", withExtension: "mp3")`
    static func shortlow1Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shortlow1Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "shortlow2", withExtension: "mp3")`
    static func shortlow2Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shortlow2Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "shortlow3", withExtension: "mp3")`
    static func shortlow3Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shortlow3Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "shortlow4", withExtension: "mp3")`
    static func shortlow4Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shortlow4Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "spaceship", withExtension: "mp3")`
    static func spaceshipMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.spaceshipMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "xdripalert", withExtension: "aif")`
    static func xdripalertAif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.xdripalertAif
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 36 images.
  struct image {
    /// Image `ic_alarm_delay`.
    static let ic_alarm_delay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_alarm_delay")
    /// Image `ic_alarm`.
    static let ic_alarm = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_alarm")
    /// Image `ic_arrow_left`.
    static let ic_arrow_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_left")
    /// Image `ic_arrow_right`.
    static let ic_arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_right")
    /// Image `ic_clock`.
    static let ic_clock = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_clock")
    /// Image `ic_pushpin_lock`.
    static let ic_pushpin_lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pushpin_lock")
    /// Image `ic_pushpin_unlock`.
    static let ic_pushpin_unlock = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pushpin_unlock")
    /// Image `ic_radio_button_on`.
    static let ic_radio_button_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radio_button_on")
    /// Image `ic_radio_button`.
    static let ic_radio_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radio_button")
    /// Image `ic_search`.
    static let ic_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search")
    /// Image `ic_statistics`.
    static let ic_statistics = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_statistics")
    /// Image `ic_tab_bloodsugar_h`.
    static let ic_tab_bloodsugar_h = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_bloodsugar_h")
    /// Image `ic_tab_bloodsugar`.
    static let ic_tab_bloodsugar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_bloodsugar")
    /// Image `ic_tab_bluetooth_h`.
    static let ic_tab_bluetooth_h = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_bluetooth_h")
    /// Image `ic_tab_bluetooth`.
    static let ic_tab_bluetooth = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_bluetooth")
    /// Image `ic_tab_settings_h`.
    static let ic_tab_settings_h = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_settings_h")
    /// Image `ic_tab_settings`.
    static let ic_tab_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_settings")
    /// Image `ic_to_portrait`.
    static let ic_to_portrait = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_to_portrait")
    /// Image `logo-launchScreen`.
    static let logoLaunchScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo-launchScreen")
    /// Image `sensor14_00`.
    static let sensor14_00 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sensor14_00")
    /// Image `sensor14_01_urgent`.
    static let sensor14_01_urgent = Rswift.ImageResource(bundle: R.hostingBundle, name: "sensor14_01_urgent")
    /// Image `sensor14_01_warning`.
    static let sensor14_01_warning = Rswift.ImageResource(bundle: R.hostingBundle, name: "sensor14_01_warning")
    /// Image `sensor14_01`.
    static let sensor14_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sensor14_01")
    /// Image `sensor14_02`.
    static let sensor14_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sensor14_02")
    /// Image `sensor14_03`.
    static let sensor14_03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sensor14_03")
    /// Image `sensor14_04`.
    static let sensor14_04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sensor14_04")
    /// Image `sensor14_05`.
    static let sensor14_05 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sensor14_05")
    /// Image `sensor14_06`.
    static let sensor14_06 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sensor14_06")
    /// Image `sensor14_07`.
    static let sensor14_07 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sensor14_07")
    /// Image `sensor14_08`.
    static let sensor14_08 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sensor14_08")
    /// Image `sensor14_09`.
    static let sensor14_09 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sensor14_09")
    /// Image `sensor14_10`.
    static let sensor14_10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sensor14_10")
    /// Image `sensor14_11`.
    static let sensor14_11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sensor14_11")
    /// Image `sensor14_12`.
    static let sensor14_12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sensor14_12")
    /// Image `sensor14_13`.
    static let sensor14_13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sensor14_13")
    /// Image `sensor14_14`.
    static let sensor14_14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sensor14_14")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_alarm", bundle: ..., traitCollection: ...)`
    static func ic_alarm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_alarm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_alarm_delay", bundle: ..., traitCollection: ...)`
    static func ic_alarm_delay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_alarm_delay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_left", bundle: ..., traitCollection: ...)`
    static func ic_arrow_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_right", bundle: ..., traitCollection: ...)`
    static func ic_arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_clock", bundle: ..., traitCollection: ...)`
    static func ic_clock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_clock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pushpin_lock", bundle: ..., traitCollection: ...)`
    static func ic_pushpin_lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pushpin_lock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pushpin_unlock", bundle: ..., traitCollection: ...)`
    static func ic_pushpin_unlock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pushpin_unlock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_radio_button", bundle: ..., traitCollection: ...)`
    static func ic_radio_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_radio_button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_radio_button_on", bundle: ..., traitCollection: ...)`
    static func ic_radio_button_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_radio_button_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search", bundle: ..., traitCollection: ...)`
    static func ic_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_statistics", bundle: ..., traitCollection: ...)`
    static func ic_statistics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_statistics, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_bloodsugar", bundle: ..., traitCollection: ...)`
    static func ic_tab_bloodsugar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_bloodsugar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_bloodsugar_h", bundle: ..., traitCollection: ...)`
    static func ic_tab_bloodsugar_h(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_bloodsugar_h, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_bluetooth", bundle: ..., traitCollection: ...)`
    static func ic_tab_bluetooth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_bluetooth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_bluetooth_h", bundle: ..., traitCollection: ...)`
    static func ic_tab_bluetooth_h(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_bluetooth_h, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_settings", bundle: ..., traitCollection: ...)`
    static func ic_tab_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_settings_h", bundle: ..., traitCollection: ...)`
    static func ic_tab_settings_h(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_settings_h, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_to_portrait", bundle: ..., traitCollection: ...)`
    static func ic_to_portrait(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_to_portrait, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo-launchScreen", bundle: ..., traitCollection: ...)`
    static func logoLaunchScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoLaunchScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sensor14_00", bundle: ..., traitCollection: ...)`
    static func sensor14_00(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sensor14_00, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sensor14_01", bundle: ..., traitCollection: ...)`
    static func sensor14_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sensor14_01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sensor14_01_urgent", bundle: ..., traitCollection: ...)`
    static func sensor14_01_urgent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sensor14_01_urgent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sensor14_01_warning", bundle: ..., traitCollection: ...)`
    static func sensor14_01_warning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sensor14_01_warning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sensor14_02", bundle: ..., traitCollection: ...)`
    static func sensor14_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sensor14_02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sensor14_03", bundle: ..., traitCollection: ...)`
    static func sensor14_03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sensor14_03, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sensor14_04", bundle: ..., traitCollection: ...)`
    static func sensor14_04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sensor14_04, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sensor14_05", bundle: ..., traitCollection: ...)`
    static func sensor14_05(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sensor14_05, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sensor14_06", bundle: ..., traitCollection: ...)`
    static func sensor14_06(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sensor14_06, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sensor14_07", bundle: ..., traitCollection: ...)`
    static func sensor14_07(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sensor14_07, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sensor14_08", bundle: ..., traitCollection: ...)`
    static func sensor14_08(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sensor14_08, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sensor14_09", bundle: ..., traitCollection: ...)`
    static func sensor14_09(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sensor14_09, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sensor14_10", bundle: ..., traitCollection: ...)`
    static func sensor14_10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sensor14_10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sensor14_11", bundle: ..., traitCollection: ...)`
    static func sensor14_11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sensor14_11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sensor14_12", bundle: ..., traitCollection: ...)`
    static func sensor14_12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sensor14_12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sensor14_13", bundle: ..., traitCollection: ...)`
    static func sensor14_13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sensor14_13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sensor14_14", bundle: ..., traitCollection: ...)`
    static func sensor14_14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sensor14_14, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `StatisticsView`.
    static let statisticsView = _R.nib._StatisticsView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StatisticsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.statisticsView) instead")
    static func statisticsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.statisticsView)
    }
    #endif

    static func statisticsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.statisticsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `SettingsCell`.
    static let settingsCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "SettingsCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 20 localization tables.
  struct string {
    /// This `R.string.alertTypesSettingsView` struct is generated, and contains static references to 16 localization keys.
    struct alertTypesSettingsView {
      /// en translation: Alarm Name
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerttypesettingsview_givename = Rswift.StringResource(key: "alerttypesettingsview_givename", tableName: "AlertTypesSettingsView", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Alarm Types
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerttypessettingsview_screentitle = Rswift.StringResource(key: "alerttypessettingsview_screentitle", tableName: "AlertTypesSettingsView", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Allow Snooze Via Notification?
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerttypesettingsview_snoozevianotification = Rswift.StringResource(key: "alerttypesettingsview_snoozevianotification", tableName: "AlertTypesSettingsView", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: An Alarm Type with this name already exists. Use a different name
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerttypenamealreadyexistsmessages = Rswift.StringResource(key: "alerttypenamealreadyexistsmessages", tableName: "AlertTypesSettingsView", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Default Snooze Time (mins)
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerttypesettingsview_defaultsnoozeperiod = Rswift.StringResource(key: "alerttypesettingsview_defaultsnoozeperiod", tableName: "AlertTypesSettingsView", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Delete Alarm Type: 
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let confirmdeletionalerttype = Rswift.StringResource(key: "confirmdeletionalerttype", tableName: "AlertTypesSettingsView", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Edit Alarm Type
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerttypesettingsview_screentitle = Rswift.StringResource(key: "alerttypesettingsview_screentitle", tableName: "AlertTypesSettingsView", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Enabled?
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerttypesettingsview_enabled = Rswift.StringResource(key: "alerttypesettingsview_enabled", tableName: "AlertTypesSettingsView", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerttypesettingsview_name = Rswift.StringResource(key: "alerttypesettingsview_name", tableName: "AlertTypesSettingsView", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: No Sound
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alertTypeNoSound = Rswift.StringResource(key: "alertTypeNoSound", tableName: "AlertTypesSettingsView", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Override Mute?
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerttypesettingsview_overridemute = Rswift.StringResource(key: "alerttypesettingsview_overridemute", tableName: "AlertTypesSettingsView", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Snooze Time in Minutes
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerttypesettingsview_givesnoozeperiod = Rswift.StringResource(key: "alerttypesettingsview_givesnoozeperiod", tableName: "AlertTypesSettingsView", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Sound
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerttypesettingsview_sound = Rswift.StringResource(key: "alerttypesettingsview_sound", tableName: "AlertTypesSettingsView", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Sound Name
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerttypesettingsview_picksoundname = Rswift.StringResource(key: "alerttypesettingsview_picksoundname", tableName: "AlertTypesSettingsView", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Vibrate?
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerttypesettingsview_vibrate = Rswift.StringResource(key: "alerttypesettingsview_vibrate", tableName: "AlertTypesSettingsView", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: iOS Sound
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerttypesettingsview_defaultiossound = Rswift.StringResource(key: "alerttypesettingsview_defaultiossound", tableName: "AlertTypesSettingsView", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)

      /// en translation: Alarm Name
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerttypesettingsview_givename(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerttypesettingsview_givename", tableName: "AlertTypesSettingsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AlertTypesSettingsView", preferredLanguages: preferredLanguages) else {
          return "alerttypesettingsview_givename"
        }

        return NSLocalizedString("alerttypesettingsview_givename", tableName: "AlertTypesSettingsView", bundle: bundle, comment: "")
      }

      /// en translation: Alarm Types
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerttypessettingsview_screentitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerttypessettingsview_screentitle", tableName: "AlertTypesSettingsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AlertTypesSettingsView", preferredLanguages: preferredLanguages) else {
          return "alerttypessettingsview_screentitle"
        }

        return NSLocalizedString("alerttypessettingsview_screentitle", tableName: "AlertTypesSettingsView", bundle: bundle, comment: "")
      }

      /// en translation: Allow Snooze Via Notification?
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerttypesettingsview_snoozevianotification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerttypesettingsview_snoozevianotification", tableName: "AlertTypesSettingsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AlertTypesSettingsView", preferredLanguages: preferredLanguages) else {
          return "alerttypesettingsview_snoozevianotification"
        }

        return NSLocalizedString("alerttypesettingsview_snoozevianotification", tableName: "AlertTypesSettingsView", bundle: bundle, comment: "")
      }

      /// en translation: An Alarm Type with this name already exists. Use a different name
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerttypenamealreadyexistsmessages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerttypenamealreadyexistsmessages", tableName: "AlertTypesSettingsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AlertTypesSettingsView", preferredLanguages: preferredLanguages) else {
          return "alerttypenamealreadyexistsmessages"
        }

        return NSLocalizedString("alerttypenamealreadyexistsmessages", tableName: "AlertTypesSettingsView", bundle: bundle, comment: "")
      }

      /// en translation: Default Snooze Time (mins)
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerttypesettingsview_defaultsnoozeperiod(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerttypesettingsview_defaultsnoozeperiod", tableName: "AlertTypesSettingsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AlertTypesSettingsView", preferredLanguages: preferredLanguages) else {
          return "alerttypesettingsview_defaultsnoozeperiod"
        }

        return NSLocalizedString("alerttypesettingsview_defaultsnoozeperiod", tableName: "AlertTypesSettingsView", bundle: bundle, comment: "")
      }

      /// en translation: Delete Alarm Type: 
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func confirmdeletionalerttype(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmdeletionalerttype", tableName: "AlertTypesSettingsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AlertTypesSettingsView", preferredLanguages: preferredLanguages) else {
          return "confirmdeletionalerttype"
        }

        return NSLocalizedString("confirmdeletionalerttype", tableName: "AlertTypesSettingsView", bundle: bundle, comment: "")
      }

      /// en translation: Edit Alarm Type
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerttypesettingsview_screentitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerttypesettingsview_screentitle", tableName: "AlertTypesSettingsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AlertTypesSettingsView", preferredLanguages: preferredLanguages) else {
          return "alerttypesettingsview_screentitle"
        }

        return NSLocalizedString("alerttypesettingsview_screentitle", tableName: "AlertTypesSettingsView", bundle: bundle, comment: "")
      }

      /// en translation: Enabled?
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerttypesettingsview_enabled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerttypesettingsview_enabled", tableName: "AlertTypesSettingsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AlertTypesSettingsView", preferredLanguages: preferredLanguages) else {
          return "alerttypesettingsview_enabled"
        }

        return NSLocalizedString("alerttypesettingsview_enabled", tableName: "AlertTypesSettingsView", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerttypesettingsview_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerttypesettingsview_name", tableName: "AlertTypesSettingsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AlertTypesSettingsView", preferredLanguages: preferredLanguages) else {
          return "alerttypesettingsview_name"
        }

        return NSLocalizedString("alerttypesettingsview_name", tableName: "AlertTypesSettingsView", bundle: bundle, comment: "")
      }

      /// en translation: No Sound
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alertTypeNoSound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alertTypeNoSound", tableName: "AlertTypesSettingsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AlertTypesSettingsView", preferredLanguages: preferredLanguages) else {
          return "alertTypeNoSound"
        }

        return NSLocalizedString("alertTypeNoSound", tableName: "AlertTypesSettingsView", bundle: bundle, comment: "")
      }

      /// en translation: Override Mute?
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerttypesettingsview_overridemute(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerttypesettingsview_overridemute", tableName: "AlertTypesSettingsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AlertTypesSettingsView", preferredLanguages: preferredLanguages) else {
          return "alerttypesettingsview_overridemute"
        }

        return NSLocalizedString("alerttypesettingsview_overridemute", tableName: "AlertTypesSettingsView", bundle: bundle, comment: "")
      }

      /// en translation: Snooze Time in Minutes
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerttypesettingsview_givesnoozeperiod(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerttypesettingsview_givesnoozeperiod", tableName: "AlertTypesSettingsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AlertTypesSettingsView", preferredLanguages: preferredLanguages) else {
          return "alerttypesettingsview_givesnoozeperiod"
        }

        return NSLocalizedString("alerttypesettingsview_givesnoozeperiod", tableName: "AlertTypesSettingsView", bundle: bundle, comment: "")
      }

      /// en translation: Sound
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerttypesettingsview_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerttypesettingsview_sound", tableName: "AlertTypesSettingsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AlertTypesSettingsView", preferredLanguages: preferredLanguages) else {
          return "alerttypesettingsview_sound"
        }

        return NSLocalizedString("alerttypesettingsview_sound", tableName: "AlertTypesSettingsView", bundle: bundle, comment: "")
      }

      /// en translation: Sound Name
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerttypesettingsview_picksoundname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerttypesettingsview_picksoundname", tableName: "AlertTypesSettingsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AlertTypesSettingsView", preferredLanguages: preferredLanguages) else {
          return "alerttypesettingsview_picksoundname"
        }

        return NSLocalizedString("alerttypesettingsview_picksoundname", tableName: "AlertTypesSettingsView", bundle: bundle, comment: "")
      }

      /// en translation: Vibrate?
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerttypesettingsview_vibrate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerttypesettingsview_vibrate", tableName: "AlertTypesSettingsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AlertTypesSettingsView", preferredLanguages: preferredLanguages) else {
          return "alerttypesettingsview_vibrate"
        }

        return NSLocalizedString("alerttypesettingsview_vibrate", tableName: "AlertTypesSettingsView", bundle: bundle, comment: "")
      }

      /// en translation: iOS Sound
      ///
      /// Locales: en, nl, zh, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerttypesettingsview_defaultiossound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerttypesettingsview_defaultiossound", tableName: "AlertTypesSettingsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AlertTypesSettingsView", preferredLanguages: preferredLanguages) else {
          return "alerttypesettingsview_defaultiossound"
        }

        return NSLocalizedString("alerttypesettingsview_defaultiossound", tableName: "AlertTypesSettingsView", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.alerts` struct is generated, and contains static references to 18 localization keys.
    struct alerts {
      /// en translation: Alarm Type
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerttype = Rswift.StringResource(key: "alerttype", tableName: "Alerts", bundle: R.hostingBundle, locales: ["nl", "zh", "en", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Alarms
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alertsettingsview_screentitle = Rswift.StringResource(key: "alertsettingsview_screentitle", tableName: "Alerts", bundle: R.hostingBundle, locales: ["nl", "zh", "en", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Apply from:
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alertstart = Rswift.StringResource(key: "alertstart", tableName: "Alerts", bundle: R.hostingBundle, locales: ["nl", "zh", "en", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Calibration Needed
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerts_calibrationneeded = Rswift.StringResource(key: "alerts_calibrationneeded", tableName: "Alerts", bundle: R.hostingBundle, locales: ["nl", "zh", "en", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Change Alarm Value
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let changealertvalue = Rswift.StringResource(key: "changealertvalue", tableName: "Alerts", bundle: R.hostingBundle, locales: ["nl", "zh", "en", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Delete Alarm?
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let confirmdeletionalert = Rswift.StringResource(key: "confirmdeletionalert", tableName: "Alerts", bundle: R.hostingBundle, locales: ["nl", "zh", "en", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Edit Alarm
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alertssettingsview_screentitle = Rswift.StringResource(key: "alertssettingsview_screentitle", tableName: "Alerts", bundle: R.hostingBundle, locales: ["nl", "zh", "en", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Fast Drop Alarm
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerts_fastdrop = Rswift.StringResource(key: "alerts_fastdrop", tableName: "Alerts", bundle: R.hostingBundle, locales: ["nl", "zh", "en", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Fast Rise Alarm
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerts_fastrise = Rswift.StringResource(key: "alerts_fastrise", tableName: "Alerts", bundle: R.hostingBundle, locales: ["nl", "zh", "en", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: High Alarm
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerts_highalerttitle = Rswift.StringResource(key: "alerts_highalerttitle", tableName: "Alerts", bundle: R.hostingBundle, locales: ["nl", "zh", "en", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Low Alarm
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerts_lowalerttitle = Rswift.StringResource(key: "alerts_lowalerttitle", tableName: "Alerts", bundle: R.hostingBundle, locales: ["nl", "zh", "en", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Missed Readings
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerts_missedreadingalerttitle = Rswift.StringResource(key: "alerts_missedreadingalerttitle", tableName: "Alerts", bundle: R.hostingBundle, locales: ["nl", "zh", "en", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Select Snooze Time
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerts_select_snooze_time = Rswift.StringResource(key: "alerts_select_snooze_time", tableName: "Alerts", bundle: R.hostingBundle, locales: ["nl", "zh", "en", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Snooze
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerts_snooze = Rswift.StringResource(key: "alerts_snooze", tableName: "Alerts", bundle: R.hostingBundle, locales: ["nl", "zh", "en", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Transmitter Battery Low
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerts_batterylow = Rswift.StringResource(key: "alerts_batterylow", tableName: "Alerts", bundle: R.hostingBundle, locales: ["nl", "zh", "en", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Value
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alertvalue = Rswift.StringResource(key: "alertvalue", tableName: "Alerts", bundle: R.hostingBundle, locales: ["nl", "zh", "en", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Very High Alarm
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerts_veryhighalerttitle = Rswift.StringResource(key: "alerts_veryhighalerttitle", tableName: "Alerts", bundle: R.hostingBundle, locales: ["nl", "zh", "en", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Very Low Alarm
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static let alerts_verylowalerttitle = Rswift.StringResource(key: "alerts_verylowalerttitle", tableName: "Alerts", bundle: R.hostingBundle, locales: ["nl", "zh", "en", "ar", "fi", "pt", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)

      /// en translation: Alarm Type
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerttype(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerttype", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "alerttype"
        }

        return NSLocalizedString("alerttype", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// en translation: Alarms
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alertsettingsview_screentitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alertsettingsview_screentitle", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "alertsettingsview_screentitle"
        }

        return NSLocalizedString("alertsettingsview_screentitle", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// en translation: Apply from:
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alertstart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alertstart", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "alertstart"
        }

        return NSLocalizedString("alertstart", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// en translation: Calibration Needed
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerts_calibrationneeded(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerts_calibrationneeded", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "alerts_calibrationneeded"
        }

        return NSLocalizedString("alerts_calibrationneeded", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// en translation: Change Alarm Value
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func changealertvalue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("changealertvalue", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "changealertvalue"
        }

        return NSLocalizedString("changealertvalue", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// en translation: Delete Alarm?
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func confirmdeletionalert(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmdeletionalert", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "confirmdeletionalert"
        }

        return NSLocalizedString("confirmdeletionalert", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// en translation: Edit Alarm
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alertssettingsview_screentitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alertssettingsview_screentitle", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "alertssettingsview_screentitle"
        }

        return NSLocalizedString("alertssettingsview_screentitle", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// en translation: Fast Drop Alarm
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerts_fastdrop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerts_fastdrop", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "alerts_fastdrop"
        }

        return NSLocalizedString("alerts_fastdrop", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// en translation: Fast Rise Alarm
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerts_fastrise(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerts_fastrise", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "alerts_fastrise"
        }

        return NSLocalizedString("alerts_fastrise", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// en translation: High Alarm
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerts_highalerttitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerts_highalerttitle", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "alerts_highalerttitle"
        }

        return NSLocalizedString("alerts_highalerttitle", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// en translation: Low Alarm
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerts_lowalerttitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerts_lowalerttitle", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "alerts_lowalerttitle"
        }

        return NSLocalizedString("alerts_lowalerttitle", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// en translation: Missed Readings
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerts_missedreadingalerttitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerts_missedreadingalerttitle", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "alerts_missedreadingalerttitle"
        }

        return NSLocalizedString("alerts_missedreadingalerttitle", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// en translation: Select Snooze Time
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerts_select_snooze_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerts_select_snooze_time", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "alerts_select_snooze_time"
        }

        return NSLocalizedString("alerts_select_snooze_time", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// en translation: Snooze
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerts_snooze(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerts_snooze", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "alerts_snooze"
        }

        return NSLocalizedString("alerts_snooze", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// en translation: Transmitter Battery Low
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerts_batterylow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerts_batterylow", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "alerts_batterylow"
        }

        return NSLocalizedString("alerts_batterylow", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// en translation: Value
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alertvalue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alertvalue", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "alertvalue"
        }

        return NSLocalizedString("alertvalue", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// en translation: Very High Alarm
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerts_veryhighalerttitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerts_veryhighalerttitle", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "alerts_veryhighalerttitle"
        }

        return NSLocalizedString("alerts_veryhighalerttitle", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// en translation: Very Low Alarm
      ///
      /// Locales: nl, zh, en, ar, fi, pt, de, es, fr, it, pl-PL, ru, sl, sv
      static func alerts_verylowalerttitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alerts_verylowalerttitle", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "alerts_verylowalerttitle"
        }

        return NSLocalizedString("alerts_verylowalerttitle", tableName: "Alerts", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.bluetoothPeripheralView` struct is generated, and contains static references to 31 localization keys.
    struct bluetoothPeripheralView {
      /// en translation: Address
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let address = Rswift.StringResource(key: "address", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Alias
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let bluetoothPeripheralAlias = Rswift.StringResource(key: "bluetoothPeripheralAlias", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Battery
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let battery = Rswift.StringResource(key: "battery", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Bootloader
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let bootLoader = Rswift.StringResource(key: "bootLoader", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Choose an alias for this bluetooth device, the name will be shown in the app and is easier for you to recognize
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let selectAliasText = Rswift.StringResource(key: "selectAliasText", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Click 'Disconnect' to confirm that you really want to disconnect from the transmitter.
      ///
      /// Locales: en, pt, nl, es, fr, de, sv
      static let confirmDisconnectMessage = Rswift.StringResource(key: "confirmDisconnectMessage", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "pt", "nl", "es", "fr", "de", "sv"], comment: nil)
      /// en translation: Confirm Disconnect
      ///
      /// Locales: en, pt, nl, es, fr, de, sv
      static let confirmDisconnectTitle = Rswift.StringResource(key: "confirmDisconnectTitle", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "pt", "nl", "es", "fr", "de", "sv"], comment: nil)
      /// en translation: Connect
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let connect = Rswift.StringResource(key: "connect", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Connected
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let connected = Rswift.StringResource(key: "connected", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Connected At
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let connectedAt = Rswift.StringResource(key: "connectedAt", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Disconnect
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let disconnect = Rswift.StringResource(key: "disconnect", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Disconnected At
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let disConnectedAt = Rswift.StringResource(key: "disConnectedAt", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Do you want to delete bluetooth device: 
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let confirmDeletionPeripheral = Rswift.StringResource(key: "confirmDeletionPeripheral", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Last Reset
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let lastReset = Rswift.StringResource(key: "lastReset", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Last Reset Timestamp is not known
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let lastResetNotKnown = Rswift.StringResource(key: "lastResetNotKnown", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Missing Transmitter ID
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let needsTransmitterId = Rswift.StringResource(key: "needsTransmitterId", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Not Connected
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let notConnected = Rswift.StringResource(key: "notConnected", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Not Scanning
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let notTryingToConnect = Rswift.StringResource(key: "notTryingToConnect", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Ready to Scan
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let readyToScan = Rswift.StringResource(key: "readyToScan", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Reset Transmitter?
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let resetRequired = Rswift.StringResource(key: "resetRequired", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Scan
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let scan = Rswift.StringResource(key: "scan", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Scanning
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let scanning = Rswift.StringResource(key: "scanning", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Scanning
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let tryingToConnect = Rswift.StringResource(key: "tryingToConnect", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Sensor Type
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let sensorType = Rswift.StringResource(key: "sensorType", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Serial Number
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let sensorSerialNumber = Rswift.StringResource(key: "SensorSerialNumber", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Serial Number
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let serialNumber = Rswift.StringResource(key: "serialNumber", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Status
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let status = Rswift.StringResource(key: "status", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Stop Scanning
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let donotconnect = Rswift.StringResource(key: "donotconnect", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: There is already a bluetooth device with this alias
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let aliasAlreadyExists = Rswift.StringResource(key: "aliasAlreadyExists", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Transmitter Reset Result
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let transmitterResultResult = Rswift.StringResource(key: "transmitterResultResult", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: You can not activate a CGM in Follower Mode
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static let cannotActiveCGMInFollowerMode = Rswift.StringResource(key: "cannotActiveCGMInFollowerMode", tableName: "BluetoothPeripheralView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "es", "fr", "de", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)

      /// en translation: Address
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("address", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "address"
        }

        return NSLocalizedString("address", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Alias
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func bluetoothPeripheralAlias(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bluetoothPeripheralAlias", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "bluetoothPeripheralAlias"
        }

        return NSLocalizedString("bluetoothPeripheralAlias", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Battery
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func battery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("battery", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "battery"
        }

        return NSLocalizedString("battery", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Bootloader
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func bootLoader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bootLoader", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "bootLoader"
        }

        return NSLocalizedString("bootLoader", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Choose an alias for this bluetooth device, the name will be shown in the app and is easier for you to recognize
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func selectAliasText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("selectAliasText", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "selectAliasText"
        }

        return NSLocalizedString("selectAliasText", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Click 'Disconnect' to confirm that you really want to disconnect from the transmitter.
      ///
      /// Locales: en, pt, nl, es, fr, de, sv
      static func confirmDisconnectMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmDisconnectMessage", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "confirmDisconnectMessage"
        }

        return NSLocalizedString("confirmDisconnectMessage", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Disconnect
      ///
      /// Locales: en, pt, nl, es, fr, de, sv
      static func confirmDisconnectTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmDisconnectTitle", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "confirmDisconnectTitle"
        }

        return NSLocalizedString("confirmDisconnectTitle", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Connect
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func connect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connect", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "connect"
        }

        return NSLocalizedString("connect", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Connected
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func connected(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connected", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "connected"
        }

        return NSLocalizedString("connected", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Connected At
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func connectedAt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connectedAt", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "connectedAt"
        }

        return NSLocalizedString("connectedAt", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Disconnect
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func disconnect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("disconnect", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "disconnect"
        }

        return NSLocalizedString("disconnect", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Disconnected At
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func disConnectedAt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("disConnectedAt", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "disConnectedAt"
        }

        return NSLocalizedString("disConnectedAt", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Do you want to delete bluetooth device: 
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func confirmDeletionPeripheral(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmDeletionPeripheral", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "confirmDeletionPeripheral"
        }

        return NSLocalizedString("confirmDeletionPeripheral", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Last Reset
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func lastReset(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lastReset", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "lastReset"
        }

        return NSLocalizedString("lastReset", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Last Reset Timestamp is not known
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func lastResetNotKnown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lastResetNotKnown", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "lastResetNotKnown"
        }

        return NSLocalizedString("lastResetNotKnown", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Missing Transmitter ID
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func needsTransmitterId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("needsTransmitterId", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "needsTransmitterId"
        }

        return NSLocalizedString("needsTransmitterId", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Not Connected
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func notConnected(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notConnected", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "notConnected"
        }

        return NSLocalizedString("notConnected", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Not Scanning
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func notTryingToConnect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notTryingToConnect", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "notTryingToConnect"
        }

        return NSLocalizedString("notTryingToConnect", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Ready to Scan
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func readyToScan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("readyToScan", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "readyToScan"
        }

        return NSLocalizedString("readyToScan", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Reset Transmitter?
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func resetRequired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resetRequired", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "resetRequired"
        }

        return NSLocalizedString("resetRequired", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Scan
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func scan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "scan"
        }

        return NSLocalizedString("scan", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Scanning
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func scanning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scanning", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "scanning"
        }

        return NSLocalizedString("scanning", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Scanning
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func tryingToConnect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tryingToConnect", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "tryingToConnect"
        }

        return NSLocalizedString("tryingToConnect", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Sensor Type
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func sensorType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sensorType", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "sensorType"
        }

        return NSLocalizedString("sensorType", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Serial Number
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func sensorSerialNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SensorSerialNumber", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "SensorSerialNumber"
        }

        return NSLocalizedString("SensorSerialNumber", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Serial Number
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func serialNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("serialNumber", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "serialNumber"
        }

        return NSLocalizedString("serialNumber", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Status
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func status(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("status", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "status"
        }

        return NSLocalizedString("status", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Stop Scanning
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func donotconnect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("donotconnect", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "donotconnect"
        }

        return NSLocalizedString("donotconnect", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: There is already a bluetooth device with this alias
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func aliasAlreadyExists(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aliasAlreadyExists", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "aliasAlreadyExists"
        }

        return NSLocalizedString("aliasAlreadyExists", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: Transmitter Reset Result
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func transmitterResultResult(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transmitterResultResult", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "transmitterResultResult"
        }

        return NSLocalizedString("transmitterResultResult", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      /// en translation: You can not activate a CGM in Follower Mode
      ///
      /// Locales: en, ar, fi, pt, nl, es, fr, de, it, pl-PL, ru, sl, zh, sv
      static func cannotActiveCGMInFollowerMode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cannotActiveCGMInFollowerMode", tableName: "BluetoothPeripheralView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralView", preferredLanguages: preferredLanguages) else {
          return "cannotActiveCGMInFollowerMode"
        }

        return NSLocalizedString("cannotActiveCGMInFollowerMode", tableName: "BluetoothPeripheralView", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.bluetoothPeripheralsView` struct is generated, and contains static references to 5 localization keys.
    struct bluetoothPeripheralsView {
      /// en translation: Battery Level:
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let batteryLevel = Rswift.StringResource(key: "batteryLevel", tableName: "BluetoothPeripheralsView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Bluetooth
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let screenTitle = Rswift.StringResource(key: "screenTitle", tableName: "BluetoothPeripheralsView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Select Device Type
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let selectCategory = Rswift.StringResource(key: "selectCategory", tableName: "BluetoothPeripheralsView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Select Transmitter Type
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let selectType = Rswift.StringResource(key: "selectType", tableName: "BluetoothPeripheralsView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: You cannot have more than one CGM Transmitter which is connected or being scanned for. Verify your other CGM Transmitters and click 'Stop Scanning', 'Disconnect' or just delete them
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let noMultipleActiveCGMsAllowed = Rswift.StringResource(key: "noMultipleActiveCGMsAllowed", tableName: "BluetoothPeripheralsView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)

      /// en translation: Battery Level:
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func batteryLevel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("batteryLevel", tableName: "BluetoothPeripheralsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralsView", preferredLanguages: preferredLanguages) else {
          return "batteryLevel"
        }

        return NSLocalizedString("batteryLevel", tableName: "BluetoothPeripheralsView", bundle: bundle, comment: "")
      }

      /// en translation: Bluetooth
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func screenTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screenTitle", tableName: "BluetoothPeripheralsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralsView", preferredLanguages: preferredLanguages) else {
          return "screenTitle"
        }

        return NSLocalizedString("screenTitle", tableName: "BluetoothPeripheralsView", bundle: bundle, comment: "")
      }

      /// en translation: Select Device Type
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func selectCategory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("selectCategory", tableName: "BluetoothPeripheralsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralsView", preferredLanguages: preferredLanguages) else {
          return "selectCategory"
        }

        return NSLocalizedString("selectCategory", tableName: "BluetoothPeripheralsView", bundle: bundle, comment: "")
      }

      /// en translation: Select Transmitter Type
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func selectType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("selectType", tableName: "BluetoothPeripheralsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralsView", preferredLanguages: preferredLanguages) else {
          return "selectType"
        }

        return NSLocalizedString("selectType", tableName: "BluetoothPeripheralsView", bundle: bundle, comment: "")
      }

      /// en translation: You cannot have more than one CGM Transmitter which is connected or being scanned for. Verify your other CGM Transmitters and click 'Stop Scanning', 'Disconnect' or just delete them
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func noMultipleActiveCGMsAllowed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noMultipleActiveCGMsAllowed", tableName: "BluetoothPeripheralsView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BluetoothPeripheralsView", preferredLanguages: preferredLanguages) else {
          return "noMultipleActiveCGMsAllowed"
        }

        return NSLocalizedString("noMultipleActiveCGMsAllowed", tableName: "BluetoothPeripheralsView", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.calibrationRequest` struct is generated, and contains static references to 4 localization keys.
    struct calibrationRequest {
      /// en translation: Calibration
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let calibration_notification_title = Rswift.StringResource(key: "calibration_notification_title", tableName: "CalibrationRequest", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Calibration
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let calibration_title = Rswift.StringResource(key: "calibration_title", tableName: "CalibrationRequest", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Click the Notification to Calibrate
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let calibration_notification_body = Rswift.StringResource(key: "calibration_notification_body", tableName: "CalibrationRequest", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Enter Calibration Value
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let enter_calibration_value = Rswift.StringResource(key: "enter_calibration_value", tableName: "CalibrationRequest", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)

      /// en translation: Calibration
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func calibration_notification_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("calibration_notification_title", tableName: "CalibrationRequest", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CalibrationRequest", preferredLanguages: preferredLanguages) else {
          return "calibration_notification_title"
        }

        return NSLocalizedString("calibration_notification_title", tableName: "CalibrationRequest", bundle: bundle, comment: "")
      }

      /// en translation: Calibration
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func calibration_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("calibration_title", tableName: "CalibrationRequest", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CalibrationRequest", preferredLanguages: preferredLanguages) else {
          return "calibration_title"
        }

        return NSLocalizedString("calibration_title", tableName: "CalibrationRequest", bundle: bundle, comment: "")
      }

      /// en translation: Click the Notification to Calibrate
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func calibration_notification_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("calibration_notification_body", tableName: "CalibrationRequest", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CalibrationRequest", preferredLanguages: preferredLanguages) else {
          return "calibration_notification_body"
        }

        return NSLocalizedString("calibration_notification_body", tableName: "CalibrationRequest", bundle: bundle, comment: "")
      }

      /// en translation: Enter Calibration Value
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func enter_calibration_value(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_calibration_value", tableName: "CalibrationRequest", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CalibrationRequest", preferredLanguages: preferredLanguages) else {
          return "enter_calibration_value"
        }

        return NSLocalizedString("enter_calibration_value", tableName: "CalibrationRequest", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.common` struct is generated, and contains static references to 50 localization keys.
    struct common {
      /// en translation: Add
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let add = Rswift.StringResource(key: "add", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Average
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_statistics_average = Rswift.StringResource(key: "common_statistics_average", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: BG Unit
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_bloodglucoseunit_short = Rswift.StringResource(key: "common_bloodglucoseunit_short", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Blood Glucose Unit
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_bloodglucoseunit = Rswift.StringResource(key: "common_bloodglucoseunit", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: CV
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_statistics_cv = Rswift.StringResource(key: "common_statistics_cv", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_cancel = Rswift.StringResource(key: "common_cancel", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Default
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_default = Rswift.StringResource(key: "common_default", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let delete = Rswift.StringResource(key: "delete", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Don't Show Again
      ///
      /// Locales: en, nl, pt, de, es, fr, sv
      static let common_dontshowagain = Rswift.StringResource(key: "common_dontshowagain", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "pt", "de", "es", "fr", "sv"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let update = Rswift.StringResource(key: "update", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Firmware
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let firmware = Rswift.StringResource(key: "firmware", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: H
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_hourshort = Rswift.StringResource(key: "common_hourshort", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: HIGH
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_high = Rswift.StringResource(key: "common_high", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Hardware
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let hardware = Rswift.StringResource(key: "hardware", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: HbA1c
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_statistics_a1c = Rswift.StringResource(key: "common_statistics_a1c", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: High
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_statistics_high = Rswift.StringResource(key: "common_statistics_high", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: In Range
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_statistics_inRange = Rswift.StringResource(key: "common_statistics_inRange", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Invalid Value
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let invalidValue = Rswift.StringResource(key: "invalidValue", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Invalid account or password
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let invalidAccountOrPassword = Rswift.StringResource(key: "invalidAccountOrPassword", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: LOW
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_low = Rswift.StringResource(key: "common_low", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Low
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_statistics_low = Rswift.StringResource(key: "common_statistics_low", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let name = Rswift.StringResource(key: "name", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: No
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let no = Rswift.StringResource(key: "no", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_Ok = Rswift.StringResource(key: "common_Ok", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Off
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let off = Rswift.StringResource(key: "off", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: On
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let on = Rswift.StringResource(key: "on", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Password:
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_password = Rswift.StringResource(key: "common_password", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Readings
      ///
      /// Locales: en, zh
      static let common_statistics_bgReadingsCount = Rswift.StringResource(key: "common_statistics_bgReadingsCount", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "zh"], comment: nil)
      /// en translation: SD
      ///
      /// Locales: en, zh
      static let common_statistics_stdDeviation = Rswift.StringResource(key: "common_statistics_stdDeviation", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "zh"], comment: nil)
      /// en translation: Sensor status:
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let sensorStatus = Rswift.StringResource(key: "sensorStatus", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Today
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_today = Rswift.StringResource(key: "common_today", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Today
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_todayshort = Rswift.StringResource(key: "common_todayshort", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Unknown
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let unknown = Rswift.StringResource(key: "unknown", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Warning!
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let warning = Rswift.StringResource(key: "warning", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: WiFi
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let wiFi = Rswift.StringResource(key: "WiFi", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let yes = Rswift.StringResource(key: "yes", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: d
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_dayshort = Rswift.StringResource(key: "common_dayshort", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: day
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_day = Rswift.StringResource(key: "common_day", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: days
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_days = Rswift.StringResource(key: "common_days", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: green
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let green = Rswift.StringResource(key: "green", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: hour
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_hour = Rswift.StringResource(key: "common_hour", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: hours
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_hours = Rswift.StringResource(key: "common_hours", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: mg/dL
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_mgdl = Rswift.StringResource(key: "common_mgdl", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: min
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_minute = Rswift.StringResource(key: "common_minute", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: mins
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_minutes = Rswift.StringResource(key: "common_minutes", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: mmol/L
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_mmol = Rswift.StringResource(key: "common_mmol", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: red
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let red = Rswift.StringResource(key: "red", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: week
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let common_week = Rswift.StringResource(key: "common_week", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: white
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let white = Rswift.StringResource(key: "white", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: yellow
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static let yellow = Rswift.StringResource(key: "yellow", tableName: "Common", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fi", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)

      /// en translation: Add
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "add"
        }

        return NSLocalizedString("add", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Average
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_statistics_average(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_statistics_average", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_statistics_average"
        }

        return NSLocalizedString("common_statistics_average", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: BG Unit
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_bloodglucoseunit_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_bloodglucoseunit_short", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_bloodglucoseunit_short"
        }

        return NSLocalizedString("common_bloodglucoseunit_short", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Blood Glucose Unit
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_bloodglucoseunit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_bloodglucoseunit", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_bloodglucoseunit"
        }

        return NSLocalizedString("common_bloodglucoseunit", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: CV
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_statistics_cv(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_statistics_cv", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_statistics_cv"
        }

        return NSLocalizedString("common_statistics_cv", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_cancel", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_cancel"
        }

        return NSLocalizedString("common_cancel", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Default
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_default(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_default", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_default"
        }

        return NSLocalizedString("common_default", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "delete"
        }

        return NSLocalizedString("delete", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Don't Show Again
      ///
      /// Locales: en, nl, pt, de, es, fr, sv
      static func common_dontshowagain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_dontshowagain", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_dontshowagain"
        }

        return NSLocalizedString("common_dontshowagain", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("update", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "update"
        }

        return NSLocalizedString("update", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Firmware
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func firmware(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firmware", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "firmware"
        }

        return NSLocalizedString("firmware", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: H
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_hourshort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_hourshort", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_hourshort"
        }

        return NSLocalizedString("common_hourshort", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: HIGH
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_high(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_high", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_high"
        }

        return NSLocalizedString("common_high", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Hardware
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func hardware(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hardware", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "hardware"
        }

        return NSLocalizedString("hardware", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: HbA1c
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_statistics_a1c(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_statistics_a1c", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_statistics_a1c"
        }

        return NSLocalizedString("common_statistics_a1c", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: High
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_statistics_high(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_statistics_high", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_statistics_high"
        }

        return NSLocalizedString("common_statistics_high", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: In Range
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_statistics_inRange(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_statistics_inRange", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_statistics_inRange"
        }

        return NSLocalizedString("common_statistics_inRange", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Invalid Value
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func invalidValue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalidValue", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "invalidValue"
        }

        return NSLocalizedString("invalidValue", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Invalid account or password
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func invalidAccountOrPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalidAccountOrPassword", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "invalidAccountOrPassword"
        }

        return NSLocalizedString("invalidAccountOrPassword", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: LOW
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_low(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_low", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_low"
        }

        return NSLocalizedString("common_low", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Low
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_statistics_low(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_statistics_low", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_statistics_low"
        }

        return NSLocalizedString("common_statistics_low", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("name", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "name"
        }

        return NSLocalizedString("name", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "no"
        }

        return NSLocalizedString("no", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_Ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_Ok", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_Ok"
        }

        return NSLocalizedString("common_Ok", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Off
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func off(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("off", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "off"
        }

        return NSLocalizedString("off", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: On
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func on(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("on", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "on"
        }

        return NSLocalizedString("on", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Password:
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_password", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_password"
        }

        return NSLocalizedString("common_password", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Readings
      ///
      /// Locales: en, zh
      static func common_statistics_bgReadingsCount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_statistics_bgReadingsCount", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_statistics_bgReadingsCount"
        }

        return NSLocalizedString("common_statistics_bgReadingsCount", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: SD
      ///
      /// Locales: en, zh
      static func common_statistics_stdDeviation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_statistics_stdDeviation", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_statistics_stdDeviation"
        }

        return NSLocalizedString("common_statistics_stdDeviation", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Sensor status:
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func sensorStatus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sensorStatus", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "sensorStatus"
        }

        return NSLocalizedString("sensorStatus", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Today
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_today(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_today", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_today"
        }

        return NSLocalizedString("common_today", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Today
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_todayshort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_todayshort", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_todayshort"
        }

        return NSLocalizedString("common_todayshort", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Unknown
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unknown", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "unknown"
        }

        return NSLocalizedString("unknown", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Warning!
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func warning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("warning", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "warning"
        }

        return NSLocalizedString("warning", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: WiFi
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func wiFi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WiFi", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "WiFi"
        }

        return NSLocalizedString("WiFi", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yes", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "yes"
        }

        return NSLocalizedString("yes", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: d
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_dayshort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_dayshort", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_dayshort"
        }

        return NSLocalizedString("common_dayshort", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: day
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_day(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_day", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_day"
        }

        return NSLocalizedString("common_day", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: days
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_days(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_days", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_days"
        }

        return NSLocalizedString("common_days", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: green
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func green(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("green", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "green"
        }

        return NSLocalizedString("green", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: hour
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_hour(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_hour", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_hour"
        }

        return NSLocalizedString("common_hour", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: hours
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_hours(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_hours", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_hours"
        }

        return NSLocalizedString("common_hours", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: mg/dL
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_mgdl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_mgdl", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_mgdl"
        }

        return NSLocalizedString("common_mgdl", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: min
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_minute(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_minute", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_minute"
        }

        return NSLocalizedString("common_minute", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: mins
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_minutes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_minutes", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_minutes"
        }

        return NSLocalizedString("common_minutes", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: mmol/L
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_mmol(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_mmol", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_mmol"
        }

        return NSLocalizedString("common_mmol", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: red
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func red(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("red", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "red"
        }

        return NSLocalizedString("red", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: week
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func common_week(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_week", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "common_week"
        }

        return NSLocalizedString("common_week", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: white
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func white(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("white", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "white"
        }

        return NSLocalizedString("white", tableName: "Common", bundle: bundle, comment: "")
      }

      /// en translation: yellow
      ///
      /// Locales: en, nl, zh, pt, ar, fi, de, es, fr, it, pl-PL, ru, sl, sv
      static func yellow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yellow", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "yellow"
        }

        return NSLocalizedString("yellow", tableName: "Common", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.dexcomShareTestResult` struct is generated, and contains static references to 9 localization keys.
    struct dexcomShareTestResult {
      /// en translation: Dexcom Share Upload Error
      ///
      /// Locales: en, zh, pt, ar, fi, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let dexcomsharetestresult_uploadErrorWarning = Rswift.StringResource(key: "dexcomsharetestresult_uploadErrorWarning", tableName: "DexcomShareTestResult", bundle: R.hostingBundle, locales: ["en", "zh", "pt", "ar", "fi", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: It seems that the Transmitter ID or serial number
      ///
      /// Locales: en, zh, pt, ar, fi, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let dexcomsharetestresult_monitored_receiver_not_assigned_1 = Rswift.StringResource(key: "dexcomsharetestresult_monitored_receiver_not_assigned_1", tableName: "DexcomShareTestResult", bundle: R.hostingBundle, locales: ["en", "zh", "pt", "ar", "fi", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Maximum login attempts exceeded. Wait 10 minutes and try again.
      ///
      /// Locales: en, zh, pt, ar, fi, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let dexcomsharetestresult_SSO_AuthenticateMaxAttemptsExceeed = Rswift.StringResource(key: "dexcomsharetestresult_SSO_AuthenticateMaxAttemptsExceeed", tableName: "DexcomShareTestResult", bundle: R.hostingBundle, locales: ["en", "zh", "pt", "ar", "fi", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: The Dexcom Share Serial Number does not match the serial number for this account. Verify the Serial Number in the settings.
      ///
      /// Locales: en, zh, pt, ar, fi, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let dexcomsharetestresult_monitored_receiver_sn_doesnotmatch = Rswift.StringResource(key: "dexcomsharetestresult_monitored_receiver_sn_doesnotmatch", tableName: "DexcomShareTestResult", bundle: R.hostingBundle, locales: ["en", "zh", "pt", "ar", "fi", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Use the official Dexcom app to register the Transmitter (G5) or Share receiver (G4)  You are possibly just using the wrong URL, verify the setting 'Use US URL?'
      ///
      /// Locales: en, zh, pt, ar, fi, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let dexcomsharetestresult_monitored_receiver_not_assigned_3 = Rswift.StringResource(key: "dexcomsharetestresult_monitored_receiver_not_assigned_3", tableName: "DexcomShareTestResult", bundle: R.hostingBundle, locales: ["en", "zh", "pt", "ar", "fi", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Verification Error
      ///
      /// Locales: en, zh, pt, ar, fi, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let dexcomsharetestresult_verificationerroralerttitle = Rswift.StringResource(key: "dexcomsharetestresult_verificationerroralerttitle", tableName: "DexcomShareTestResult", bundle: R.hostingBundle, locales: ["en", "zh", "pt", "ar", "fi", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Verification Successful
      ///
      /// Locales: en, zh, pt, ar, fi, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let dexcomsharetestresult_verificationsuccessfulalerttitle = Rswift.StringResource(key: "dexcomsharetestresult_verificationsuccessfulalerttitle", tableName: "DexcomShareTestResult", bundle: R.hostingBundle, locales: ["en", "zh", "pt", "ar", "fi", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Your Dexcom Share account was verified successfully
      ///
      /// Locales: en, zh, pt, ar, fi, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let dexcomsharetestresult_verificationsuccessfulalertbody = Rswift.StringResource(key: "dexcomsharetestresult_verificationsuccessfulalertbody", tableName: "DexcomShareTestResult", bundle: R.hostingBundle, locales: ["en", "zh", "pt", "ar", "fi", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: is not assigned to
      ///
      /// Locales: en, zh, pt, ar, fi, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let dexcomsharetestresult_monitored_receiver_not_assigned_2 = Rswift.StringResource(key: "dexcomsharetestresult_monitored_receiver_not_assigned_2", tableName: "DexcomShareTestResult", bundle: R.hostingBundle, locales: ["en", "zh", "pt", "ar", "fi", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)

      /// en translation: Dexcom Share Upload Error
      ///
      /// Locales: en, zh, pt, ar, fi, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func dexcomsharetestresult_uploadErrorWarning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dexcomsharetestresult_uploadErrorWarning", tableName: "DexcomShareTestResult", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DexcomShareTestResult", preferredLanguages: preferredLanguages) else {
          return "dexcomsharetestresult_uploadErrorWarning"
        }

        return NSLocalizedString("dexcomsharetestresult_uploadErrorWarning", tableName: "DexcomShareTestResult", bundle: bundle, comment: "")
      }

      /// en translation: It seems that the Transmitter ID or serial number
      ///
      /// Locales: en, zh, pt, ar, fi, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func dexcomsharetestresult_monitored_receiver_not_assigned_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dexcomsharetestresult_monitored_receiver_not_assigned_1", tableName: "DexcomShareTestResult", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DexcomShareTestResult", preferredLanguages: preferredLanguages) else {
          return "dexcomsharetestresult_monitored_receiver_not_assigned_1"
        }

        return NSLocalizedString("dexcomsharetestresult_monitored_receiver_not_assigned_1", tableName: "DexcomShareTestResult", bundle: bundle, comment: "")
      }

      /// en translation: Maximum login attempts exceeded. Wait 10 minutes and try again.
      ///
      /// Locales: en, zh, pt, ar, fi, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func dexcomsharetestresult_SSO_AuthenticateMaxAttemptsExceeed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dexcomsharetestresult_SSO_AuthenticateMaxAttemptsExceeed", tableName: "DexcomShareTestResult", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DexcomShareTestResult", preferredLanguages: preferredLanguages) else {
          return "dexcomsharetestresult_SSO_AuthenticateMaxAttemptsExceeed"
        }

        return NSLocalizedString("dexcomsharetestresult_SSO_AuthenticateMaxAttemptsExceeed", tableName: "DexcomShareTestResult", bundle: bundle, comment: "")
      }

      /// en translation: The Dexcom Share Serial Number does not match the serial number for this account. Verify the Serial Number in the settings.
      ///
      /// Locales: en, zh, pt, ar, fi, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func dexcomsharetestresult_monitored_receiver_sn_doesnotmatch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dexcomsharetestresult_monitored_receiver_sn_doesnotmatch", tableName: "DexcomShareTestResult", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DexcomShareTestResult", preferredLanguages: preferredLanguages) else {
          return "dexcomsharetestresult_monitored_receiver_sn_doesnotmatch"
        }

        return NSLocalizedString("dexcomsharetestresult_monitored_receiver_sn_doesnotmatch", tableName: "DexcomShareTestResult", bundle: bundle, comment: "")
      }

      /// en translation: Use the official Dexcom app to register the Transmitter (G5) or Share receiver (G4)  You are possibly just using the wrong URL, verify the setting 'Use US URL?'
      ///
      /// Locales: en, zh, pt, ar, fi, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func dexcomsharetestresult_monitored_receiver_not_assigned_3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dexcomsharetestresult_monitored_receiver_not_assigned_3", tableName: "DexcomShareTestResult", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DexcomShareTestResult", preferredLanguages: preferredLanguages) else {
          return "dexcomsharetestresult_monitored_receiver_not_assigned_3"
        }

        return NSLocalizedString("dexcomsharetestresult_monitored_receiver_not_assigned_3", tableName: "DexcomShareTestResult", bundle: bundle, comment: "")
      }

      /// en translation: Verification Error
      ///
      /// Locales: en, zh, pt, ar, fi, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func dexcomsharetestresult_verificationerroralerttitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dexcomsharetestresult_verificationerroralerttitle", tableName: "DexcomShareTestResult", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DexcomShareTestResult", preferredLanguages: preferredLanguages) else {
          return "dexcomsharetestresult_verificationerroralerttitle"
        }

        return NSLocalizedString("dexcomsharetestresult_verificationerroralerttitle", tableName: "DexcomShareTestResult", bundle: bundle, comment: "")
      }

      /// en translation: Verification Successful
      ///
      /// Locales: en, zh, pt, ar, fi, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func dexcomsharetestresult_verificationsuccessfulalerttitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dexcomsharetestresult_verificationsuccessfulalerttitle", tableName: "DexcomShareTestResult", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DexcomShareTestResult", preferredLanguages: preferredLanguages) else {
          return "dexcomsharetestresult_verificationsuccessfulalerttitle"
        }

        return NSLocalizedString("dexcomsharetestresult_verificationsuccessfulalerttitle", tableName: "DexcomShareTestResult", bundle: bundle, comment: "")
      }

      /// en translation: Your Dexcom Share account was verified successfully
      ///
      /// Locales: en, zh, pt, ar, fi, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func dexcomsharetestresult_verificationsuccessfulalertbody(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dexcomsharetestresult_verificationsuccessfulalertbody", tableName: "DexcomShareTestResult", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DexcomShareTestResult", preferredLanguages: preferredLanguages) else {
          return "dexcomsharetestresult_verificationsuccessfulalertbody"
        }

        return NSLocalizedString("dexcomsharetestresult_verificationsuccessfulalertbody", tableName: "DexcomShareTestResult", bundle: bundle, comment: "")
      }

      /// en translation: is not assigned to
      ///
      /// Locales: en, zh, pt, ar, fi, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func dexcomsharetestresult_monitored_receiver_not_assigned_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dexcomsharetestresult_monitored_receiver_not_assigned_2", tableName: "DexcomShareTestResult", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DexcomShareTestResult", preferredLanguages: preferredLanguages) else {
          return "dexcomsharetestresult_monitored_receiver_not_assigned_2"
        }

        return NSLocalizedString("dexcomsharetestresult_monitored_receiver_not_assigned_2", tableName: "DexcomShareTestResult", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.errorMessages` struct is generated, and contains static references to 4 localization keys.
    struct errorMessages {
      /// en translation: The Transmitter ID should be 5 characters long
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let error_message_transmitter_id_should_have_length_5 = Rswift.StringResource(key: "error_message_transmitter_id_should_have_length_5", tableName: "ErrorMessages", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: The Transmitter ID should be 6 characters long
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let error_message_transmitter_id_should_have_length_6 = Rswift.StringResource(key: "error_message_transmitter_id_should_have_length_6", tableName: "ErrorMessages", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: The Transmitter ID should be the last 5 numbers of the BluCon ID written on side of the device.  Example: If the BluCon ID is BLU1742B01007, the Transmitter ID you should use is 01007.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let transmitterIdBluCon = Rswift.StringResource(key: "TransmitterIdBluCon", tableName: "ErrorMessages", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: The Transmitter ID should only contain characters a-z, A-Z or 0-9
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let error_message_Dexcom_transmitter_id_invalid_characters = Rswift.StringResource(key: "error_message_Dexcom_transmitter_id_invalid_characters", tableName: "ErrorMessages", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)

      /// en translation: The Transmitter ID should be 5 characters long
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func error_message_transmitter_id_should_have_length_5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_transmitter_id_should_have_length_5", tableName: "ErrorMessages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ErrorMessages", preferredLanguages: preferredLanguages) else {
          return "error_message_transmitter_id_should_have_length_5"
        }

        return NSLocalizedString("error_message_transmitter_id_should_have_length_5", tableName: "ErrorMessages", bundle: bundle, comment: "")
      }

      /// en translation: The Transmitter ID should be 6 characters long
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func error_message_transmitter_id_should_have_length_6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_transmitter_id_should_have_length_6", tableName: "ErrorMessages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ErrorMessages", preferredLanguages: preferredLanguages) else {
          return "error_message_transmitter_id_should_have_length_6"
        }

        return NSLocalizedString("error_message_transmitter_id_should_have_length_6", tableName: "ErrorMessages", bundle: bundle, comment: "")
      }

      /// en translation: The Transmitter ID should be the last 5 numbers of the BluCon ID written on side of the device.  Example: If the BluCon ID is BLU1742B01007, the Transmitter ID you should use is 01007.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func transmitterIdBluCon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TransmitterIdBluCon", tableName: "ErrorMessages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ErrorMessages", preferredLanguages: preferredLanguages) else {
          return "TransmitterIdBluCon"
        }

        return NSLocalizedString("TransmitterIdBluCon", tableName: "ErrorMessages", bundle: bundle, comment: "")
      }

      /// en translation: The Transmitter ID should only contain characters a-z, A-Z or 0-9
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func error_message_Dexcom_transmitter_id_invalid_characters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_Dexcom_transmitter_id_invalid_characters", tableName: "ErrorMessages", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ErrorMessages", preferredLanguages: preferredLanguages) else {
          return "error_message_Dexcom_transmitter_id_invalid_characters"
        }

        return NSLocalizedString("error_message_Dexcom_transmitter_id_invalid_characters", tableName: "ErrorMessages", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.homeView` struct is generated, and contains static references to 39 localization keys.
    struct homeView {
      /// en translation: Bluetooth is not on. Switch on bluetooth first and then try again.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let bluetoothisnoton = Rswift.StringResource(key: "bluetoothisnoton", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Calibrate
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let calibrate = Rswift.StringResource(key: "calibrate", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Failed
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let failed = Rswift.StringResource(key: "failed", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: First go to the Bluetooth screen where you can add and scan for your transmitter.  Then come back to the Home screen and start your sensor.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let transmitterinfo = Rswift.StringResource(key: "transmitterinfo", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Forget Transmitter
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let forgetbluetoothdeviceactiontitle = Rswift.StringResource(key: "forgetbluetoothdeviceactiontitle", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: In the next dialogs, you will need to set the date and time the sensor was inserted. It is important that you set the date and time as correct as possible.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let startsensortimeinfo = Rswift.StringResource(key: "startsensortimeinfo", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Last Connection
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let lastconnection = Rswift.StringResource(key: "lastconnection", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Lock
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let lock = Rswift.StringResource(key: "lock", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: New BG Reading
      ///
      /// Locales: en, zh
      static let toast_new_bg_reading = Rswift.StringResource(key: "toast_new_bg_reading", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh"], comment: nil)
      /// en translation: Not Known
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let notknown = Rswift.StringResource(key: "notknown", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Not Started
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let notstarted = Rswift.StringResource(key: "notstarted", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Please Read
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let info = Rswift.StringResource(key: "info", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Scan for Transmitter
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let scanbluetoothdeviceactiontitle = Rswift.StringResource(key: "scanbluetoothdeviceactiontitle", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Scanning Started.  Keep %@ open in the foreground until a connection is made.  (There's no need to turn off Auto-Lock. Just don't press the home button and don't lock your iPhone)
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let startScanningInfo = Rswift.StringResource(key: "startScanningInfo", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Scanning for Transmitter...
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let scanbluetoothdeviceongoing = Rswift.StringResource(key: "scanbluetoothdeviceongoing", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Screen Lock Enabled
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let screenlocktitle = Rswift.StringResource(key: "screenlocktitle", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Sensor
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let sensor = Rswift.StringResource(key: "sensor", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Sensor Started
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let sensorstart = Rswift.StringResource(key: "sensorstart", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Snooze
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let presnooze = Rswift.StringResource(key: "presnooze", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Start Sensor
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let startsensor = Rswift.StringResource(key: "startsensor", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Status
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let statusactiontitle = Rswift.StringResource(key: "statusactiontitle", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Stop Sensor
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let stopsensor = Rswift.StringResource(key: "stopsensor", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Success
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let success = Rswift.StringResource(key: "success", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: The Transmitter battery is too low!
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let dexcomBatteryTooLow = Rswift.StringResource(key: "dexcomBatteryTooLow", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: The Transmitter is not paired with this iPhone. Open the application.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let transmitternotpaired = Rswift.StringResource(key: "transmitternotpaired", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: The Transmitter was successfully paired.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let transmitterpairingsuccessful = Rswift.StringResource(key: "transmitterpairingsuccessful", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: The sensor was not detected. Check if the Transmitter is correctly placed on the sensor.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let sensornotdetected = Rswift.StringResource(key: "sensornotdetected", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: There must be at least two readings before you can calibrate. You will be requested to calibrate as soon as there is another reading.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let theremustbeareadingbeforecalibration = Rswift.StringResource(key: "theremustbeareadingbeforecalibration", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: This program is free software distributed under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.  See http://www.gnu.org/licenses/gpl.txt for more details.  Info: 
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let licenseinfo = Rswift.StringResource(key: "licenseinfo", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: This will keep the screen awake until you move to another app or click Unlock.  It is recommended that you keep the phone plugged into a charger to prevent battery drain.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let screenlockinfo = Rswift.StringResource(key: "screenlockinfo", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Too late! The Transmitter has already been disconnected. You should get a new pairing request in a few minutes.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let transmitterpairingtoolate = Rswift.StringResource(key: "transmitterpairingtoolate", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Transmitter Battery Level
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let transmitterbatterylevel = Rswift.StringResource(key: "transmitterbatterylevel", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Transmitter did not reply to pairing request.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let transmitterpairingattempttimeout = Rswift.StringResource(key: "transmitterpairingattempttimeout", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Unlock
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let unlock = Rswift.StringResource(key: "unlock", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: When using the Libre algoritm, it is not necessary to calibrate the sensor.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let calibrationNotNecessary = Rswift.StringResource(key: "calibrationNotNecessary", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: You cannot calibrate unless you have a transmitter connected.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let theresNoCGMTransmitterActive = Rswift.StringResource(key: "theresNoCGMTransmitterActive", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: You cannot calibrate unless you have started a sensor.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let startsensorbeforecalibration = Rswift.StringResource(key: "startsensorbeforecalibration", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: You did not give bluetooth permission for %@. Go to the settings, find the %@ app, and enable Bluetooth.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let bluetoothIsNotAuthorized = Rswift.StringResource(key: "bluetoothIsNotAuthorized", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: ago
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let ago = Rswift.StringResource(key: "ago", tableName: "HomeView", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)

      /// en translation: Bluetooth is not on. Switch on bluetooth first and then try again.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func bluetoothisnoton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bluetoothisnoton", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "bluetoothisnoton"
        }

        return NSLocalizedString("bluetoothisnoton", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Calibrate
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func calibrate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("calibrate", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "calibrate"
        }

        return NSLocalizedString("calibrate", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Failed
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("failed", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "failed"
        }

        return NSLocalizedString("failed", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: First go to the Bluetooth screen where you can add and scan for your transmitter.  Then come back to the Home screen and start your sensor.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func transmitterinfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transmitterinfo", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "transmitterinfo"
        }

        return NSLocalizedString("transmitterinfo", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Forget Transmitter
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func forgetbluetoothdeviceactiontitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forgetbluetoothdeviceactiontitle", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "forgetbluetoothdeviceactiontitle"
        }

        return NSLocalizedString("forgetbluetoothdeviceactiontitle", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: In the next dialogs, you will need to set the date and time the sensor was inserted. It is important that you set the date and time as correct as possible.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func startsensortimeinfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("startsensortimeinfo", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "startsensortimeinfo"
        }

        return NSLocalizedString("startsensortimeinfo", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Last Connection
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func lastconnection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lastconnection", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "lastconnection"
        }

        return NSLocalizedString("lastconnection", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Lock
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func lock(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lock", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "lock"
        }

        return NSLocalizedString("lock", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: New BG Reading
      ///
      /// Locales: en, zh
      static func toast_new_bg_reading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toast_new_bg_reading", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "toast_new_bg_reading"
        }

        return NSLocalizedString("toast_new_bg_reading", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Not Known
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func notknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notknown", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "notknown"
        }

        return NSLocalizedString("notknown", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Not Started
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func notstarted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notstarted", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "notstarted"
        }

        return NSLocalizedString("notstarted", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Please Read
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("info", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "info"
        }

        return NSLocalizedString("info", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Scan for Transmitter
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func scanbluetoothdeviceactiontitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scanbluetoothdeviceactiontitle", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "scanbluetoothdeviceactiontitle"
        }

        return NSLocalizedString("scanbluetoothdeviceactiontitle", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Scanning Started.  Keep %@ open in the foreground until a connection is made.  (There's no need to turn off Auto-Lock. Just don't press the home button and don't lock your iPhone)
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func startScanningInfo(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("startScanningInfo", tableName: "HomeView", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "startScanningInfo"
        }

        let format = NSLocalizedString("startScanningInfo", tableName: "HomeView", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Scanning for Transmitter...
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func scanbluetoothdeviceongoing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scanbluetoothdeviceongoing", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "scanbluetoothdeviceongoing"
        }

        return NSLocalizedString("scanbluetoothdeviceongoing", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Screen Lock Enabled
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func screenlocktitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screenlocktitle", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "screenlocktitle"
        }

        return NSLocalizedString("screenlocktitle", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Sensor
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func sensor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sensor", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "sensor"
        }

        return NSLocalizedString("sensor", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Sensor Started
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func sensorstart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sensorstart", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "sensorstart"
        }

        return NSLocalizedString("sensorstart", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Snooze
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func presnooze(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("presnooze", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "presnooze"
        }

        return NSLocalizedString("presnooze", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Start Sensor
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func startsensor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("startsensor", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "startsensor"
        }

        return NSLocalizedString("startsensor", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Status
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func statusactiontitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("statusactiontitle", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "statusactiontitle"
        }

        return NSLocalizedString("statusactiontitle", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Stop Sensor
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func stopsensor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("stopsensor", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "stopsensor"
        }

        return NSLocalizedString("stopsensor", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Success
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("success", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "success"
        }

        return NSLocalizedString("success", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: The Transmitter battery is too low!
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func dexcomBatteryTooLow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dexcomBatteryTooLow", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "dexcomBatteryTooLow"
        }

        return NSLocalizedString("dexcomBatteryTooLow", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: The Transmitter is not paired with this iPhone. Open the application.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func transmitternotpaired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transmitternotpaired", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "transmitternotpaired"
        }

        return NSLocalizedString("transmitternotpaired", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: The Transmitter was successfully paired.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func transmitterpairingsuccessful(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transmitterpairingsuccessful", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "transmitterpairingsuccessful"
        }

        return NSLocalizedString("transmitterpairingsuccessful", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: The sensor was not detected. Check if the Transmitter is correctly placed on the sensor.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func sensornotdetected(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sensornotdetected", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "sensornotdetected"
        }

        return NSLocalizedString("sensornotdetected", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: There must be at least two readings before you can calibrate. You will be requested to calibrate as soon as there is another reading.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func theremustbeareadingbeforecalibration(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("theremustbeareadingbeforecalibration", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "theremustbeareadingbeforecalibration"
        }

        return NSLocalizedString("theremustbeareadingbeforecalibration", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: This program is free software distributed under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.  See http://www.gnu.org/licenses/gpl.txt for more details.  Info: 
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func licenseinfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("licenseinfo", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "licenseinfo"
        }

        return NSLocalizedString("licenseinfo", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: This will keep the screen awake until you move to another app or click Unlock.  It is recommended that you keep the phone plugged into a charger to prevent battery drain.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func screenlockinfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screenlockinfo", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "screenlockinfo"
        }

        return NSLocalizedString("screenlockinfo", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Too late! The Transmitter has already been disconnected. You should get a new pairing request in a few minutes.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func transmitterpairingtoolate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transmitterpairingtoolate", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "transmitterpairingtoolate"
        }

        return NSLocalizedString("transmitterpairingtoolate", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Transmitter Battery Level
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func transmitterbatterylevel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transmitterbatterylevel", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "transmitterbatterylevel"
        }

        return NSLocalizedString("transmitterbatterylevel", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Transmitter did not reply to pairing request.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func transmitterpairingattempttimeout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transmitterpairingattempttimeout", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "transmitterpairingattempttimeout"
        }

        return NSLocalizedString("transmitterpairingattempttimeout", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: Unlock
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func unlock(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unlock", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "unlock"
        }

        return NSLocalizedString("unlock", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: When using the Libre algoritm, it is not necessary to calibrate the sensor.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func calibrationNotNecessary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("calibrationNotNecessary", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "calibrationNotNecessary"
        }

        return NSLocalizedString("calibrationNotNecessary", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: You cannot calibrate unless you have a transmitter connected.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func theresNoCGMTransmitterActive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("theresNoCGMTransmitterActive", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "theresNoCGMTransmitterActive"
        }

        return NSLocalizedString("theresNoCGMTransmitterActive", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: You cannot calibrate unless you have started a sensor.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func startsensorbeforecalibration(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("startsensorbeforecalibration", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "startsensorbeforecalibration"
        }

        return NSLocalizedString("startsensorbeforecalibration", tableName: "HomeView", bundle: bundle, comment: "")
      }

      /// en translation: You did not give bluetooth permission for %@. Go to the settings, find the %@ app, and enable Bluetooth.
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func bluetoothIsNotAuthorized(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("bluetoothIsNotAuthorized", tableName: "HomeView", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "bluetoothIsNotAuthorized"
        }

        let format = NSLocalizedString("bluetoothIsNotAuthorized", tableName: "HomeView", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: ago
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func ago(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ago", tableName: "HomeView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "HomeView", preferredLanguages: preferredLanguages) else {
          return "ago"
        }

        return NSLocalizedString("ago", tableName: "HomeView", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.libreErrors` struct is generated, and contains static references to 4 localization keys.
    struct libreErrors {
      /// en translation: Libre US is not supported
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let libreUSNotSupported = Rswift.StringResource(key: "libreUSNotSupported", tableName: "LibreErrors", bundle: R.hostingBundle, locales: ["en", "fi", "pt", "nl", "ar", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Libre sensor not in status ready
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let libreSensorNotReady = Rswift.StringResource(key: "libreSensorNotReady", tableName: "LibreErrors", bundle: R.hostingBundle, locales: ["en", "fi", "pt", "nl", "ar", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: No data received from oop web server
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let receivedDataIsNil = Rswift.StringResource(key: "receivedDataIsNil", tableName: "LibreErrors", bundle: R.hostingBundle, locales: ["en", "fi", "pt", "nl", "ar", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: OOP Web Server error: 
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let oOPWebServerError = Rswift.StringResource(key: "oOPWebServerError", tableName: "LibreErrors", bundle: R.hostingBundle, locales: ["en", "fi", "pt", "nl", "ar", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)

      /// en translation: Libre US is not supported
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func libreUSNotSupported(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("libreUSNotSupported", tableName: "LibreErrors", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LibreErrors", preferredLanguages: preferredLanguages) else {
          return "libreUSNotSupported"
        }

        return NSLocalizedString("libreUSNotSupported", tableName: "LibreErrors", bundle: bundle, comment: "")
      }

      /// en translation: Libre sensor not in status ready
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func libreSensorNotReady(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("libreSensorNotReady", tableName: "LibreErrors", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LibreErrors", preferredLanguages: preferredLanguages) else {
          return "libreSensorNotReady"
        }

        return NSLocalizedString("libreSensorNotReady", tableName: "LibreErrors", bundle: bundle, comment: "")
      }

      /// en translation: No data received from oop web server
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func receivedDataIsNil(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receivedDataIsNil", tableName: "LibreErrors", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LibreErrors", preferredLanguages: preferredLanguages) else {
          return "receivedDataIsNil"
        }

        return NSLocalizedString("receivedDataIsNil", tableName: "LibreErrors", bundle: bundle, comment: "")
      }

      /// en translation: OOP Web Server error: 
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func oOPWebServerError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oOPWebServerError", tableName: "LibreErrors", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LibreErrors", preferredLanguages: preferredLanguages) else {
          return "oOPWebServerError"
        }

        return NSLocalizedString("oOPWebServerError", tableName: "LibreErrors", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.libreNFC` struct is generated, and contains static references to 7 localization keys.
    struct libreNFC {
      /// en translation: Connected to Libre 2.  If you want to keeping scanning sometimes the Libre sensor with the official Libre app, then disallow bluetooth permission for the Libre app.   Otherwise, scanning the NFC with the Libre app and with the bluetooth permission allowed will break the connection between %@ and the Libre 2.
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let donotusethelibrelinkapp = Rswift.StringResource(key: "donotusethelibrelinkapp", tableName: "LibreNFC", bundle: R.hostingBundle, locales: ["en", "fi", "pt", "nl", "ar", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Error occured while scanning the sensor. Click 'Scan' top left or click 'back' and add the Libre 2 again, and scan again.
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let nfcErrorRetryScan = Rswift.StringResource(key: "nfcErrorRetryScan", tableName: "LibreNFC", bundle: R.hostingBundle, locales: ["en", "fi", "pt", "nl", "ar", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Hold the top of your iOS device near the sensor to scan
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let holdTopOfIphoneNearSensor = Rswift.StringResource(key: "holdTopOfIphoneNearSensor", tableName: "LibreNFC", bundle: R.hostingBundle, locales: ["en", "fi", "pt", "nl", "ar", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Scan Complete
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let scanComplete = Rswift.StringResource(key: "scanComplete", tableName: "LibreNFC", bundle: R.hostingBundle, locales: ["en", "fi", "pt", "nl", "ar", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: This iPhone does not support NFC
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let deviceMustSupportNFC = Rswift.StringResource(key: "deviceMustSupportNFC", tableName: "LibreNFC", bundle: R.hostingBundle, locales: ["en", "fi", "pt", "nl", "ar", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: To connect to Libre 2, this iPhone needs upgrading to iOS14
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let deviceMustSupportIOS14 = Rswift.StringResource(key: "deviceMustSupportIOS14", tableName: "LibreNFC", bundle: R.hostingBundle, locales: ["en", "fi", "pt", "nl", "ar", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: You seem to have scanned a new sensor, but %@ is having the Bluetooth connection to the old sensor.  To solve this : - Click 'disconnect' or 'stop scanning' - Go back to previous screen and add a new CGM of type Libre 2 and scan again.  %@ should now connect to the new sensor.
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let connectedLibre2DoesNotMatchScannedLibre2 = Rswift.StringResource(key: "connectedLibre2DoesNotMatchScannedLibre2", tableName: "LibreNFC", bundle: R.hostingBundle, locales: ["en", "fi", "pt", "nl", "ar", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)

      /// en translation: Connected to Libre 2.  If you want to keeping scanning sometimes the Libre sensor with the official Libre app, then disallow bluetooth permission for the Libre app.   Otherwise, scanning the NFC with the Libre app and with the bluetooth permission allowed will break the connection between %@ and the Libre 2.
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func donotusethelibrelinkapp(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("donotusethelibrelinkapp", tableName: "LibreNFC", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "LibreNFC", preferredLanguages: preferredLanguages) else {
          return "donotusethelibrelinkapp"
        }

        let format = NSLocalizedString("donotusethelibrelinkapp", tableName: "LibreNFC", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Error occured while scanning the sensor. Click 'Scan' top left or click 'back' and add the Libre 2 again, and scan again.
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func nfcErrorRetryScan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nfcErrorRetryScan", tableName: "LibreNFC", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LibreNFC", preferredLanguages: preferredLanguages) else {
          return "nfcErrorRetryScan"
        }

        return NSLocalizedString("nfcErrorRetryScan", tableName: "LibreNFC", bundle: bundle, comment: "")
      }

      /// en translation: Hold the top of your iOS device near the sensor to scan
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func holdTopOfIphoneNearSensor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holdTopOfIphoneNearSensor", tableName: "LibreNFC", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LibreNFC", preferredLanguages: preferredLanguages) else {
          return "holdTopOfIphoneNearSensor"
        }

        return NSLocalizedString("holdTopOfIphoneNearSensor", tableName: "LibreNFC", bundle: bundle, comment: "")
      }

      /// en translation: Scan Complete
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func scanComplete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scanComplete", tableName: "LibreNFC", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LibreNFC", preferredLanguages: preferredLanguages) else {
          return "scanComplete"
        }

        return NSLocalizedString("scanComplete", tableName: "LibreNFC", bundle: bundle, comment: "")
      }

      /// en translation: This iPhone does not support NFC
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func deviceMustSupportNFC(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deviceMustSupportNFC", tableName: "LibreNFC", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LibreNFC", preferredLanguages: preferredLanguages) else {
          return "deviceMustSupportNFC"
        }

        return NSLocalizedString("deviceMustSupportNFC", tableName: "LibreNFC", bundle: bundle, comment: "")
      }

      /// en translation: To connect to Libre 2, this iPhone needs upgrading to iOS14
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func deviceMustSupportIOS14(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deviceMustSupportIOS14", tableName: "LibreNFC", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LibreNFC", preferredLanguages: preferredLanguages) else {
          return "deviceMustSupportIOS14"
        }

        return NSLocalizedString("deviceMustSupportIOS14", tableName: "LibreNFC", bundle: bundle, comment: "")
      }

      /// en translation: You seem to have scanned a new sensor, but %@ is having the Bluetooth connection to the old sensor.  To solve this : - Click 'disconnect' or 'stop scanning' - Go back to previous screen and add a new CGM of type Libre 2 and scan again.  %@ should now connect to the new sensor.
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func connectedLibre2DoesNotMatchScannedLibre2(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("connectedLibre2DoesNotMatchScannedLibre2", tableName: "LibreNFC", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "LibreNFC", preferredLanguages: preferredLanguages) else {
          return "connectedLibre2DoesNotMatchScannedLibre2"
        }

        let format = NSLocalizedString("connectedLibre2DoesNotMatchScannedLibre2", tableName: "LibreNFC", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      fileprivate init() {}
    }

    /// This `R.string.libreStates` struct is generated, and contains static references to 7 localization keys.
    struct libreStates {
      /// en translation: expired
      ///
      /// Locales: en, pt, nl, ar, de, es, fr, fi, it, pl-PL, ru, sl, zh, sv
      static let expired = Rswift.StringResource(key: "expired", tableName: "LibreStates", bundle: R.hostingBundle, locales: ["en", "pt", "nl", "ar", "de", "es", "fr", "fi", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: failed
      ///
      /// Locales: en, pt, nl, ar, de, es, fr, fi, it, pl-PL, ru, sl, zh, sv
      static let failure = Rswift.StringResource(key: "failure", tableName: "LibreStates", bundle: R.hostingBundle, locales: ["en", "pt", "nl", "ar", "de", "es", "fr", "fi", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: not yet started
      ///
      /// Locales: en, pt, nl, ar, de, es, fr, fi, it, pl-PL, ru, sl, zh, sv
      static let notYetStarted = Rswift.StringResource(key: "notYetStarted", tableName: "LibreStates", bundle: R.hostingBundle, locales: ["en", "pt", "nl", "ar", "de", "es", "fr", "fi", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: ready
      ///
      /// Locales: en, pt, nl, ar, de, es, fr, fi, it, pl-PL, ru, sl, zh, sv
      static let ready = Rswift.StringResource(key: "ready", tableName: "LibreStates", bundle: R.hostingBundle, locales: ["en", "pt", "nl", "ar", "de", "es", "fr", "fi", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: shut down
      ///
      /// Locales: en, pt, nl, ar, de, es, fr, fi, it, pl-PL, ru, sl, zh, sv
      static let shutdown = Rswift.StringResource(key: "shutdown", tableName: "LibreStates", bundle: R.hostingBundle, locales: ["en", "pt", "nl", "ar", "de", "es", "fr", "fi", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: starting
      ///
      /// Locales: en, pt, nl, ar, de, es, fr, fi, it, pl-PL, ru, sl, zh, sv
      static let starting = Rswift.StringResource(key: "starting", tableName: "LibreStates", bundle: R.hostingBundle, locales: ["en", "pt", "nl", "ar", "de", "es", "fr", "fi", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: unknown
      ///
      /// Locales: en, pt, nl, ar, de, es, fr, fi, it, pl-PL, ru, sl, zh, sv
      static let unknown = Rswift.StringResource(key: "unknown", tableName: "LibreStates", bundle: R.hostingBundle, locales: ["en", "pt", "nl", "ar", "de", "es", "fr", "fi", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)

      /// en translation: expired
      ///
      /// Locales: en, pt, nl, ar, de, es, fr, fi, it, pl-PL, ru, sl, zh, sv
      static func expired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("expired", tableName: "LibreStates", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LibreStates", preferredLanguages: preferredLanguages) else {
          return "expired"
        }

        return NSLocalizedString("expired", tableName: "LibreStates", bundle: bundle, comment: "")
      }

      /// en translation: failed
      ///
      /// Locales: en, pt, nl, ar, de, es, fr, fi, it, pl-PL, ru, sl, zh, sv
      static func failure(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("failure", tableName: "LibreStates", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LibreStates", preferredLanguages: preferredLanguages) else {
          return "failure"
        }

        return NSLocalizedString("failure", tableName: "LibreStates", bundle: bundle, comment: "")
      }

      /// en translation: not yet started
      ///
      /// Locales: en, pt, nl, ar, de, es, fr, fi, it, pl-PL, ru, sl, zh, sv
      static func notYetStarted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notYetStarted", tableName: "LibreStates", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LibreStates", preferredLanguages: preferredLanguages) else {
          return "notYetStarted"
        }

        return NSLocalizedString("notYetStarted", tableName: "LibreStates", bundle: bundle, comment: "")
      }

      /// en translation: ready
      ///
      /// Locales: en, pt, nl, ar, de, es, fr, fi, it, pl-PL, ru, sl, zh, sv
      static func ready(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ready", tableName: "LibreStates", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LibreStates", preferredLanguages: preferredLanguages) else {
          return "ready"
        }

        return NSLocalizedString("ready", tableName: "LibreStates", bundle: bundle, comment: "")
      }

      /// en translation: shut down
      ///
      /// Locales: en, pt, nl, ar, de, es, fr, fi, it, pl-PL, ru, sl, zh, sv
      static func shutdown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shutdown", tableName: "LibreStates", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LibreStates", preferredLanguages: preferredLanguages) else {
          return "shutdown"
        }

        return NSLocalizedString("shutdown", tableName: "LibreStates", bundle: bundle, comment: "")
      }

      /// en translation: starting
      ///
      /// Locales: en, pt, nl, ar, de, es, fr, fi, it, pl-PL, ru, sl, zh, sv
      static func starting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("starting", tableName: "LibreStates", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LibreStates", preferredLanguages: preferredLanguages) else {
          return "starting"
        }

        return NSLocalizedString("starting", tableName: "LibreStates", bundle: bundle, comment: "")
      }

      /// en translation: unknown
      ///
      /// Locales: en, pt, nl, ar, de, es, fr, fi, it, pl-PL, ru, sl, zh, sv
      static func unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unknown", tableName: "LibreStates", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LibreStates", preferredLanguages: preferredLanguages) else {
          return "unknown"
        }

        return NSLocalizedString("unknown", tableName: "LibreStates", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 0 localization keys.
    struct localizable {
      fileprivate init() {}
    }

    /// This `R.string.m5StackView` struct is generated, and contains static references to 13 localization keys.
    struct m5StackView {
      /// en translation: Are you sure you want to power off the M5Stack?
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let powerOffConfirm = Rswift.StringResource(key: "powerOffConfirm", tableName: "M5StackView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Authentication to M5Stack Failed, either set the pre-configured password in the Settings, or, if the M5Stack does not have a preconfigured password then reset the M5Stack. M5Stack will disconnect now. You can make a new attempt by clicking 
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let authenticationFailureWarning = Rswift.StringResource(key: "authenticationFailureWarning", tableName: "M5StackView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Connect to WiFi
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let connectToWiFi = Rswift.StringResource(key: "connectToWiFi", tableName: "M5StackView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Go to
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let m5StackSoftWareHelpText = Rswift.StringResource(key: "m5StackSoftWareHelpText", tableName: "M5StackView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: M5Stack
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let m5StackViewscreenTitle = Rswift.StringResource(key: "m5StackViewscreenTitle", tableName: "M5StackView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: M5Stack
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let screenTitle = Rswift.StringResource(key: "screenTitle", tableName: "M5StackView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: M5Stack must be connected to be able to power it off
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let deviceMustBeConnectedToPowerOff = Rswift.StringResource(key: "deviceMustBeConnectedToPowerOff", tableName: "M5StackView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: M5Stack must be reset in order to generate a new temporary password. When done click 
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let m5StackResetRequiredWarning = Rswift.StringResource(key: "m5StackResetRequiredWarning", tableName: "M5StackView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: M5StickC
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let m5StickCViewscreenTitle = Rswift.StringResource(key: "m5StickCViewscreenTitle", tableName: "M5StackView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Power Off
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let powerOff = Rswift.StringResource(key: "powerOff", tableName: "M5StackView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Where to find the M5Stack software?
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let m5StackSoftWhereHelpCellText = Rswift.StringResource(key: "m5StackSoftWhereHelpCellText", tableName: "M5StackView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Where to find the M5StickC software?
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let m5StickCSoftWhereHelpCellText = Rswift.StringResource(key: "m5StickCSoftWhereHelpCellText", tableName: "M5StackView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: You need to set the password in the Settings
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let blePasswordMissingWarning = Rswift.StringResource(key: "blePasswordMissingWarning", tableName: "M5StackView", bundle: R.hostingBundle, locales: ["en", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)

      /// en translation: Are you sure you want to power off the M5Stack?
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func powerOffConfirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("powerOffConfirm", tableName: "M5StackView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "M5StackView", preferredLanguages: preferredLanguages) else {
          return "powerOffConfirm"
        }

        return NSLocalizedString("powerOffConfirm", tableName: "M5StackView", bundle: bundle, comment: "")
      }

      /// en translation: Authentication to M5Stack Failed, either set the pre-configured password in the Settings, or, if the M5Stack does not have a preconfigured password then reset the M5Stack. M5Stack will disconnect now. You can make a new attempt by clicking 
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func authenticationFailureWarning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authenticationFailureWarning", tableName: "M5StackView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "M5StackView", preferredLanguages: preferredLanguages) else {
          return "authenticationFailureWarning"
        }

        return NSLocalizedString("authenticationFailureWarning", tableName: "M5StackView", bundle: bundle, comment: "")
      }

      /// en translation: Connect to WiFi
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func connectToWiFi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("connectToWiFi", tableName: "M5StackView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "M5StackView", preferredLanguages: preferredLanguages) else {
          return "connectToWiFi"
        }

        return NSLocalizedString("connectToWiFi", tableName: "M5StackView", bundle: bundle, comment: "")
      }

      /// en translation: Go to
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func m5StackSoftWareHelpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m5StackSoftWareHelpText", tableName: "M5StackView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "M5StackView", preferredLanguages: preferredLanguages) else {
          return "m5StackSoftWareHelpText"
        }

        return NSLocalizedString("m5StackSoftWareHelpText", tableName: "M5StackView", bundle: bundle, comment: "")
      }

      /// en translation: M5Stack
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func m5StackViewscreenTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m5StackViewscreenTitle", tableName: "M5StackView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "M5StackView", preferredLanguages: preferredLanguages) else {
          return "m5StackViewscreenTitle"
        }

        return NSLocalizedString("m5StackViewscreenTitle", tableName: "M5StackView", bundle: bundle, comment: "")
      }

      /// en translation: M5Stack
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func screenTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screenTitle", tableName: "M5StackView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "M5StackView", preferredLanguages: preferredLanguages) else {
          return "screenTitle"
        }

        return NSLocalizedString("screenTitle", tableName: "M5StackView", bundle: bundle, comment: "")
      }

      /// en translation: M5Stack must be connected to be able to power it off
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func deviceMustBeConnectedToPowerOff(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deviceMustBeConnectedToPowerOff", tableName: "M5StackView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "M5StackView", preferredLanguages: preferredLanguages) else {
          return "deviceMustBeConnectedToPowerOff"
        }

        return NSLocalizedString("deviceMustBeConnectedToPowerOff", tableName: "M5StackView", bundle: bundle, comment: "")
      }

      /// en translation: M5Stack must be reset in order to generate a new temporary password. When done click 
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func m5StackResetRequiredWarning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m5StackResetRequiredWarning", tableName: "M5StackView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "M5StackView", preferredLanguages: preferredLanguages) else {
          return "m5StackResetRequiredWarning"
        }

        return NSLocalizedString("m5StackResetRequiredWarning", tableName: "M5StackView", bundle: bundle, comment: "")
      }

      /// en translation: M5StickC
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func m5StickCViewscreenTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m5StickCViewscreenTitle", tableName: "M5StackView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "M5StackView", preferredLanguages: preferredLanguages) else {
          return "m5StickCViewscreenTitle"
        }

        return NSLocalizedString("m5StickCViewscreenTitle", tableName: "M5StackView", bundle: bundle, comment: "")
      }

      /// en translation: Power Off
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func powerOff(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("powerOff", tableName: "M5StackView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "M5StackView", preferredLanguages: preferredLanguages) else {
          return "powerOff"
        }

        return NSLocalizedString("powerOff", tableName: "M5StackView", bundle: bundle, comment: "")
      }

      /// en translation: Where to find the M5Stack software?
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func m5StackSoftWhereHelpCellText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m5StackSoftWhereHelpCellText", tableName: "M5StackView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "M5StackView", preferredLanguages: preferredLanguages) else {
          return "m5StackSoftWhereHelpCellText"
        }

        return NSLocalizedString("m5StackSoftWhereHelpCellText", tableName: "M5StackView", bundle: bundle, comment: "")
      }

      /// en translation: Where to find the M5StickC software?
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func m5StickCSoftWhereHelpCellText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m5StickCSoftWhereHelpCellText", tableName: "M5StackView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "M5StackView", preferredLanguages: preferredLanguages) else {
          return "m5StickCSoftWhereHelpCellText"
        }

        return NSLocalizedString("m5StickCSoftWhereHelpCellText", tableName: "M5StackView", bundle: bundle, comment: "")
      }

      /// en translation: You need to set the password in the Settings
      ///
      /// Locales: en, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func blePasswordMissingWarning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blePasswordMissingWarning", tableName: "M5StackView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "M5StackView", preferredLanguages: preferredLanguages) else {
          return "blePasswordMissingWarning"
        }

        return NSLocalizedString("blePasswordMissingWarning", tableName: "M5StackView", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 7 localization keys.
    struct main {
      /// en translation: Bluetooth
      ///
      /// Locales: fr, en, nl, sl, ru, pl-PL, it, fr, zh, de, ar, fi, pt, es, sv
      static let sgTP5HUtTitle = Rswift.StringResource(key: "sgT-p5-hUt.title", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "de", "ar", "fi", "pt", "es", "sv"], comment: nil)
      /// en translation: First View
      ///
      /// Locales: fr, en, nl, sl, ru, pl-PL, it, fr, zh, de, ar, fi, pt, es, sv
      static let kqz1wVlDText = Rswift.StringResource(key: "KQZ-1w-vlD.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "de", "ar", "fi", "pt", "es", "sv"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: fr, en, nl, sl, ru, pl-PL, it, fr, zh, de, ar, fi, pt, es, sv
      static let acWDTCKfTitle = Rswift.StringResource(key: "acW-dT-cKf.title", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "de", "ar", "fi", "pt", "es", "sv"], comment: nil)
      /// en translation: Loaded by FirstViewController
      ///
      /// Locales: fr, en, nl, sl, ru, pl-PL, it, fr, zh, de, ar, fi, pt, es, sv
      static let a5M7J77LText = Rswift.StringResource(key: "A5M-7J-77L.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "de", "ar", "fi", "pt", "es", "sv"], comment: nil)
      /// en translation: Loaded by SecondViewController
      ///
      /// Locales: fr, en, nl, sl, ru, pl-PL, it, fr, zh, de, ar, fi, pt, es, sv
      static let nDkCvGanText = Rswift.StringResource(key: "NDk-cv-Gan.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "de", "ar", "fi", "pt", "es", "sv"], comment: nil)
      /// en translation: Second View
      ///
      /// Locales: fr, en, nl, sl, ru, pl-PL, it, fr, zh, de, ar, fi, pt, es, sv
      static let zEqFUWV5Text = Rswift.StringResource(key: "zEq-FU-wV5.text", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "de", "ar", "fi", "pt", "es", "sv"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: fr, en, nl, sl, ru, pl-PL, it, fr, zh, de, ar, fi, pt, es, sv
      static let cPaGyQ4nTitle = Rswift.StringResource(key: "cPa-gy-q4n.title", tableName: "Main", bundle: R.hostingBundle, locales: ["fr", "en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "de", "ar", "fi", "pt", "es", "sv"], comment: nil)

      /// en translation: Bluetooth
      ///
      /// Locales: fr, en, nl, sl, ru, pl-PL, it, fr, zh, de, ar, fi, pt, es, sv
      static func sgTP5HUtTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sgT-p5-hUt.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "sgT-p5-hUt.title"
        }

        return NSLocalizedString("sgT-p5-hUt.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: First View
      ///
      /// Locales: fr, en, nl, sl, ru, pl-PL, it, fr, zh, de, ar, fi, pt, es, sv
      static func kqz1wVlDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KQZ-1w-vlD.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "KQZ-1w-vlD.text"
        }

        return NSLocalizedString("KQZ-1w-vlD.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: fr, en, nl, sl, ru, pl-PL, it, fr, zh, de, ar, fi, pt, es, sv
      static func acWDTCKfTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("acW-dT-cKf.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "acW-dT-cKf.title"
        }

        return NSLocalizedString("acW-dT-cKf.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Loaded by FirstViewController
      ///
      /// Locales: fr, en, nl, sl, ru, pl-PL, it, fr, zh, de, ar, fi, pt, es, sv
      static func a5M7J77LText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("A5M-7J-77L.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "A5M-7J-77L.text"
        }

        return NSLocalizedString("A5M-7J-77L.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Loaded by SecondViewController
      ///
      /// Locales: fr, en, nl, sl, ru, pl-PL, it, fr, zh, de, ar, fi, pt, es, sv
      static func nDkCvGanText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NDk-cv-Gan.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NDk-cv-Gan.text"
        }

        return NSLocalizedString("NDk-cv-Gan.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Second View
      ///
      /// Locales: fr, en, nl, sl, ru, pl-PL, it, fr, zh, de, ar, fi, pt, es, sv
      static func zEqFUWV5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zEq-FU-wV5.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "zEq-FU-wV5.text"
        }

        return NSLocalizedString("zEq-FU-wV5.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: fr, en, nl, sl, ru, pl-PL, it, fr, zh, de, ar, fi, pt, es, sv
      static func cPaGyQ4nTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cPa-gy-q4n.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "cPa-gy-q4n.title"
        }

        return NSLocalizedString("cPa-gy-q4n.title", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.nightScoutTestResult` struct is generated, and contains static references to 5 localization keys.
    struct nightScoutTestResult {
      /// en translation: Test Started
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let nightScoutAPIKeyAndURLStarted = Rswift.StringResource(key: "nightScoutAPIKeyAndURLStarted", tableName: "NightScoutTestResult", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Verification Error
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let nightscouttestresult_verificationerroralerttitle = Rswift.StringResource(key: "nightscouttestresult_verificationerroralerttitle", tableName: "NightScoutTestResult", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Verification Successful
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let nightscouttestresult_verificationsuccessfulalerttitle = Rswift.StringResource(key: "nightscouttestresult_verificationsuccessfulalerttitle", tableName: "NightScoutTestResult", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Your Nightscout URL and API_SECRET must be set before you can run the test
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let warningAPIKeyOrURLIsnil = Rswift.StringResource(key: "warningAPIKeyOrURLIsnil", tableName: "NightScoutTestResult", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Your Nightscout site was verified successfully
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static let nightscouttestresult_verificationsuccessfulalertbody = Rswift.StringResource(key: "nightscouttestresult_verificationsuccessfulalertbody", tableName: "NightScoutTestResult", bundle: R.hostingBundle, locales: ["en", "zh", "ar", "fi", "pt", "nl", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)

      /// en translation: Test Started
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func nightScoutAPIKeyAndURLStarted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nightScoutAPIKeyAndURLStarted", tableName: "NightScoutTestResult", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NightScoutTestResult", preferredLanguages: preferredLanguages) else {
          return "nightScoutAPIKeyAndURLStarted"
        }

        return NSLocalizedString("nightScoutAPIKeyAndURLStarted", tableName: "NightScoutTestResult", bundle: bundle, comment: "")
      }

      /// en translation: Verification Error
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func nightscouttestresult_verificationerroralerttitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nightscouttestresult_verificationerroralerttitle", tableName: "NightScoutTestResult", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NightScoutTestResult", preferredLanguages: preferredLanguages) else {
          return "nightscouttestresult_verificationerroralerttitle"
        }

        return NSLocalizedString("nightscouttestresult_verificationerroralerttitle", tableName: "NightScoutTestResult", bundle: bundle, comment: "")
      }

      /// en translation: Verification Successful
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func nightscouttestresult_verificationsuccessfulalerttitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nightscouttestresult_verificationsuccessfulalerttitle", tableName: "NightScoutTestResult", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NightScoutTestResult", preferredLanguages: preferredLanguages) else {
          return "nightscouttestresult_verificationsuccessfulalerttitle"
        }

        return NSLocalizedString("nightscouttestresult_verificationsuccessfulalerttitle", tableName: "NightScoutTestResult", bundle: bundle, comment: "")
      }

      /// en translation: Your Nightscout URL and API_SECRET must be set before you can run the test
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func warningAPIKeyOrURLIsnil(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("warningAPIKeyOrURLIsnil", tableName: "NightScoutTestResult", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NightScoutTestResult", preferredLanguages: preferredLanguages) else {
          return "warningAPIKeyOrURLIsnil"
        }

        return NSLocalizedString("warningAPIKeyOrURLIsnil", tableName: "NightScoutTestResult", bundle: bundle, comment: "")
      }

      /// en translation: Your Nightscout site was verified successfully
      ///
      /// Locales: en, zh, ar, fi, pt, nl, de, es, fr, it, pl-PL, ru, sl, sv
      static func nightscouttestresult_verificationsuccessfulalertbody(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nightscouttestresult_verificationsuccessfulalertbody", tableName: "NightScoutTestResult", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NightScoutTestResult", preferredLanguages: preferredLanguages) else {
          return "nightscouttestresult_verificationsuccessfulalertbody"
        }

        return NSLocalizedString("nightscouttestresult_verificationsuccessfulalertbody", tableName: "NightScoutTestResult", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.settingsViews` struct is generated, and contains static references to 108 localization keys.
    struct settingsViews {
      /// en translation: API_SECRET:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_nightScoutAPIKey = Rswift.StringResource(key: "settingsviews_nightScoutAPIKey", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: About %@
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_sectiontitleAbout = Rswift.StringResource(key: "settingsviews_sectiontitleAbout", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Account Name:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_dexcomShareAccountName = Rswift.StringResource(key: "settingsviews_dexcomShareAccountName", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Alarm
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_sectiontitlealerting = Rswift.StringResource(key: "settingsviews_sectiontitlealerting", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Alarm Types
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_row_alert_types = Rswift.StringResource(key: "settingsviews_row_alert_types", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Alarms
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_row_alerts = Rswift.StringResource(key: "settingsviews_row_alerts", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: An alarm sound is now being played with the same volume that will be used for an Alarm Type with 'Override Mute' = Off  (Also used always for Missed Reading alarms which use the iOS volume.)  Press one of the volume buttons to stop the sound, then change the volume with the volume buttons to the desired volume and test again.
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let volumeTestiOSSoundExplanation = Rswift.StringResource(key: "volumeTestiOSSoundExplanation", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: An alarm sound is now being played with the same volume that will be used for an Alarm Type with 'Override Mute' = On  (Used for all alarms except Missed Reading alerts which always use the iOS volume.)  Change the volume with the volume buttons and press OK when done.
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let volumeTestSoundPlayerExplanation = Rswift.StringResource(key: "volumeTestSoundPlayerExplanation", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Apple Health
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_sectiontitlehealthkit = Rswift.StringResource(key: "settingsviews_sectiontitlehealthkit", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Apple Watch
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let appleWatchSectionTitle = Rswift.StringResource(key: "appleWatchSectionTitle", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Background Color
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let m5stack_settingsviews_backGroundColor = Rswift.StringResource(key: "m5stack_settingsviews_backGroundColor", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Blood Glucose Units:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_selectbgunit = Rswift.StringResource(key: "settingsviews_selectbgunit", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Bluetooth
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let m5stack_settingsviews_sectiontitlebluetooth = Rswift.StringResource(key: "m5stack_settingsviews_sectiontitlebluetooth", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Build:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_build = Rswift.StringResource(key: "settingsviews_build", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Calendar To Use?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let calenderId = Rswift.StringResource(key: "calenderId", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Change: 
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let editScheduleTimePickerSubtitle = Rswift.StringResource(key: "editScheduleTimePickerSubtitle", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Create Calendar Events?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let createCalendarEvent = Rswift.StringResource(key: "createCalendarEvent", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Days to Calculate?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_daysToUseStatisticsTitle = Rswift.StringResource(key: "settingsviews_daysToUseStatisticsTitle", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Developer Settings
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let developerSettings = Rswift.StringResource(key: "developerSettings", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Dexcom Share
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_sectiontitledexcomshare = Rswift.StringResource(key: "settingsviews_sectiontitledexcomshare", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Display Delta?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let displayDeltaInCalendarEvent = Rswift.StringResource(key: "displayDeltaInCalendarEvent", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Display Trend?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_displayTrendInCalendarEvent = Rswift.StringResource(key: "settingsviews_displayTrendInCalendarEvent", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Display Unit?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let displayUnitInCalendarEvent = Rswift.StringResource(key: "displayUnitInCalendarEvent", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Dots 5 Mins Apart
      ///
      /// Locales: en, zh
      static let settingsviews_chartDots5MinsApart = Rswift.StringResource(key: "settingsviews_chartDots5MinsApart", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "zh"], comment: nil)
      /// en translation: Enable Multi-point Calibration
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_nonfixedtransmitter = Rswift.StringResource(key: "settingsviews_nonfixedtransmitter", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Enable Nightscout?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_nightScoutEnabled = Rswift.StringResource(key: "settingsviews_nightScoutEnabled", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Enter Bluetooth Password
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let m5stack_settingsviews_giveBluetoothPassword = Rswift.StringResource(key: "m5stack_settingsviews_giveBluetoothPassword", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Enter Dexcom Share Account Name
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_giveDexcomShareAccountName = Rswift.StringResource(key: "settingsviews_giveDexcomShareAccountName", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Enter Transmitter ID
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_givetransmitterid = Rswift.StringResource(key: "settingsviews_givetransmitterid", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Enter the Dexcom Receiver Serial Number
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_giveDexcomShareSerialNumber = Rswift.StringResource(key: "settingsviews_giveDexcomShareSerialNumber", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Enter your API_SECRET
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_giveNightScoutAPIKey = Rswift.StringResource(key: "settingsviews_giveNightScoutAPIKey", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Enter your NightScout URL
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_giveNightScoutUrl = Rswift.StringResource(key: "settingsviews_giveNightScoutUrl", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Explain why you need to send the trace file with as much detail as possible. If you have already reported your problem in the Facebook support group '%@', then mention your facebook name in the e-mail
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let describeProblem = Rswift.StringResource(key: "describeProblem", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Failed to Send Email
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let failedToSendEmail = Rswift.StringResource(key: "failedToSendEmail", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Follower
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_follower = Rswift.StringResource(key: "settingsviews_follower", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: General
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_sectiontitlegeneral = Rswift.StringResource(key: "settingsviews_sectiontitlegeneral", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Give Dexcom Share Password
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_giveDexcomSharePassword = Rswift.StringResource(key: "settingsviews_giveDexcomSharePassword", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: HbA1c in mmols/mol
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_useIFCCA1C = Rswift.StringResource(key: "settingsviews_useIFCCA1C", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: High Value:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_highValue = Rswift.StringResource(key: "settingsviews_highValue", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Home Screen
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_sectiontitlehomescreen = Rswift.StringResource(key: "settingsviews_sectiontitlehomescreen", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Include Debug Level
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let debugLevel = Rswift.StringResource(key: "debugLevel", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Interval:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_IntervalTitle = Rswift.StringResource(key: "settingsviews_IntervalTitle", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Issue Reporting
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let sectionTitleTrace = Rswift.StringResource(key: "sectionTitleTrace", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Language:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_speakBgReadingslanguage = Rswift.StringResource(key: "settingsviews_speakBgReadingslanguage", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: License
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_license = Rswift.StringResource(key: "settingsviews_license", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Low Value:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_lowValue = Rswift.StringResource(key: "settingsviews_lowValue", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: M5 Stack Settings
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let m5stack_settingsviews_settingstitle = Rswift.StringResource(key: "m5stack_settingsviews_settingstitle", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Master
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_master = Rswift.StringResource(key: "settingsviews_master", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Master or Follower?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_masterorfollower = Rswift.StringResource(key: "settingsviews_masterorfollower", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Maximum days we should try to use to calculate the statistics?  (Enter 0 to calculate today since midnight)
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_daysToUseStatisticsMessage = Rswift.StringResource(key: "settingsviews_daysToUseStatisticsMessage", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Minimum interval between two readings, in minutes
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_IntervalMessage = Rswift.StringResource(key: "settingsviews_IntervalMessage", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: More
      ///
      /// Locales: en, zh
      static let sectionTitleMore = Rswift.StringResource(key: "sectionTitleMore", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "zh"], comment: nil)
      /// en translation: More Settings
      ///
      /// Locales: en, zh
      static let moreSettings = Rswift.StringResource(key: "moreSettings", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "zh"], comment: nil)
      /// en translation: Multi-point Calibration
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_labelNonFixed = Rswift.StringResource(key: "settingsviews_labelNonFixed", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Multiply App Badge Reading by 10?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_multipleAppBadgeValueWith10 = Rswift.StringResource(key: "settingsviews_multipleAppBadgeValueWith10", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: NSLog
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let nslog = Rswift.StringResource(key: "nslog", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: NightScout
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_sectiontitlenightscout = Rswift.StringResource(key: "settingsviews_sectiontitlenightscout", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: OSLog
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let oslog = Rswift.StringResource(key: "oslog", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: On/Off Time Schedule for 
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let timeScheduleViewTitle = Rswift.StringResource(key: "timeScheduleViewTitle", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Port (optional):
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let nightScoutPort = Rswift.StringResource(key: "nightScoutPort", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Problem Description: 
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let emailbodyText = Rswift.StringResource(key: "emailbodyText", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Receiver Serial Number:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_dexcomShareSerialNumber = Rswift.StringResource(key: "settingsviews_dexcomShareSerialNumber", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Reset Transmitter
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_resettransmitter = Rswift.StringResource(key: "settingsviews_resettransmitter", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Schedule:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let schedule = Rswift.StringResource(key: "schedule", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Screen Brightness
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let m5stack_settingsviews_brightness = Rswift.StringResource(key: "m5stack_settingsviews_brightness", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Select Language
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_speakreadingslanguageselection = Rswift.StringResource(key: "settingsviews_speakreadingslanguageselection", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Send Issue Report
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let sendTraceFile = Rswift.StringResource(key: "sendTraceFile", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Sensor Countdown
      ///
      /// Locales: en, nl, pt, fr, de, es, sv
      static let settingsviews_sectiontitlesensorcountdown = Rswift.StringResource(key: "settingsviews_sectiontitlesensorcountdown", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "pt", "fr", "de", "es", "sv"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_settingstitle = Rswift.StringResource(key: "settingsviews_settingstitle", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Show BG in Notifications?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_showReadingInNotification = Rswift.StringResource(key: "settingsviews_showReadingInNotification", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Show BG in the App Badge?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_labelShowReadingInAppBadge = Rswift.StringResource(key: "settingsviews_labelShowReadingInAppBadge", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Show Clock when Locked?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_showClockWhenScreenIsLocked = Rswift.StringResource(key: "settingsviews_showClockWhenScreenIsLocked", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Show Colored Lines?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_showcoloredobjectives = Rswift.StringResource(key: "settingsviews_showcoloredobjectives", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Show Objectives in Graph?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_useobjectives = Rswift.StringResource(key: "settingsviews_useobjectives", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Show Sensor Countdown?
      ///
      /// Locales: en, nl, pt, fr, de, es, sv
      static let settingsviews_showSensorCountdown = Rswift.StringResource(key: "settingsviews_showSensorCountdown", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "pt", "fr", "de", "es", "sv"], comment: nil)
      /// en translation: Show Statistics?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_showStatistics = Rswift.StringResource(key: "settingsviews_showStatistics", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Smooth Libre Values?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let smoothLibreValues = Rswift.StringResource(key: "smoothLibreValues", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Speak BG Readings?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_speakBgReadings = Rswift.StringResource(key: "settingsviews_speakBgReadings", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Speak Delta?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_speakDelta = Rswift.StringResource(key: "settingsviews_speakDelta", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Speak Trend?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_speakTrend = Rswift.StringResource(key: "settingsviews_speakTrend", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Statistics
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_sectiontitlestatistics = Rswift.StringResource(key: "settingsviews_sectiontitlestatistics", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Switching from master to follower will stop your current sensor. Do you want to continue?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let warningChangeFromMasterToFollower = Rswift.StringResource(key: "warningChangeFromMasterToFollower", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Test Connection?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let testUrlAndAPIKey = Rswift.StringResource(key: "testUrlAndAPIKey", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Test Volume (Current iPhone Volume)
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let volumeTestiOSSound = Rswift.StringResource(key: "volumeTestiOSSound", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Test Volume (if Override Mute On)
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let volumeTestSoundPlayer = Rswift.StringResource(key: "volumeTestSoundPlayer", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Text Color
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let m5stack_settingsviews_textColor = Rswift.StringResource(key: "m5stack_settingsviews_textColor", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Transmitter
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_sectiontitletransmitter = Rswift.StringResource(key: "settingsviews_sectiontitletransmitter", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Transmitter ID
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_transmitterid_text_for_button = Rswift.StringResource(key: "settingsviews_transmitterid_text_for_button", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Transmitter ID:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_transmitterid = Rswift.StringResource(key: "settingsviews_transmitterid", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Transmitter Type:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_transmittertype = Rswift.StringResource(key: "settingsviews_transmittertype", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Transmitters with ID 8Gxxxx or newer are not currently supported!
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let transmitterId8OrHigherNotSupported = Rswift.StringResource(key: "transmitterId8OrHigherNotSupported", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: URL:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_nightScoutUrl = Rswift.StringResource(key: "settingsviews_nightScoutUrl", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Upload Sensor Start Time?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let uploadSensorStartTime = Rswift.StringResource(key: "uploadSensorStartTime", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Upload to Dexcom Share?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_uploadReadingstoDexcomShare = Rswift.StringResource(key: "settingsviews_uploadReadingstoDexcomShare", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Urgent High Value:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_urgentHighValue = Rswift.StringResource(key: "settingsviews_urgentHighValue", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Urgent Low Value:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_urgentLowValue = Rswift.StringResource(key: "settingsviews_urgentLowValue", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Use Alternative Graphics?
      ///
      /// Locales: en, nl, pt, fr, de, es, sv
      static let settingsviews_showSensorCountdownAlternativeGraphics = Rswift.StringResource(key: "settingsviews_showSensorCountdownAlternativeGraphics", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "pt", "fr", "de", "es", "sv"], comment: nil)
      /// en translation: Use Dexcom US Servers?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_useUSDexcomShareurl = Rswift.StringResource(key: "settingsviews_useUSDexcomShareurl", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Use Libre Algorithm
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_webooptransmitter = Rswift.StringResource(key: "settingsviews_webooptransmitter", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Use Standard Range
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_useStandardStatisticsRange = Rswift.StringResource(key: "settingsviews_useStandardStatisticsRange", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Use Upload Schedule?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_useSchedule = Rswift.StringResource(key: "settingsviews_useSchedule", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Version:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_Version = Rswift.StringResource(key: "settingsviews_Version", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Voice
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_sectiontitlespeak = Rswift.StringResource(key: "settingsviews_sectiontitlespeak", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: Write Data to Apple Health?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_healthkit = Rswift.StringResource(key: "settingsviews_healthkit", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: You cannot give authorization to %@ to access your calendar. This is possibly due to active restrictions such as parental controls being in place.
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let infoCalendarAccessRestricted = Rswift.StringResource(key: "infoCalendarAccessRestricted", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: You must configure an e-mail account on your iOS device.
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let emailNotConfigured = Rswift.StringResource(key: "emailNotConfigured", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: You previously denied access to your Calendar.  To enable it go to your device settings, privacy, calendars and enable it.
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let infoCalendarAccessDeniedByUser = Rswift.StringResource(key: "infoCalendarAccessDeniedByUser", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)
      /// en translation: xDrip or Libre Algorithm
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static let settingsviews_labelWebOOP = Rswift.StringResource(key: "settingsviews_labelWebOOP", tableName: "SettingsViews", bundle: R.hostingBundle, locales: ["en", "nl", "zh", "pt", "ar", "fr", "fi", "de", "es", "it", "pl-PL", "ru", "sl", "sv"], comment: nil)

      /// en translation: API_SECRET:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_nightScoutAPIKey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_nightScoutAPIKey", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_nightScoutAPIKey"
        }

        return NSLocalizedString("settingsviews_nightScoutAPIKey", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: About %@
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_sectiontitleAbout(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("settingsviews_sectiontitleAbout", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_sectiontitleAbout"
        }

        let format = NSLocalizedString("settingsviews_sectiontitleAbout", tableName: "SettingsViews", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Account Name:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_dexcomShareAccountName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_dexcomShareAccountName", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_dexcomShareAccountName"
        }

        return NSLocalizedString("settingsviews_dexcomShareAccountName", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Alarm
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_sectiontitlealerting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_sectiontitlealerting", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_sectiontitlealerting"
        }

        return NSLocalizedString("settingsviews_sectiontitlealerting", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Alarm Types
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_row_alert_types(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_row_alert_types", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_row_alert_types"
        }

        return NSLocalizedString("settingsviews_row_alert_types", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Alarms
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_row_alerts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_row_alerts", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_row_alerts"
        }

        return NSLocalizedString("settingsviews_row_alerts", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: An alarm sound is now being played with the same volume that will be used for an Alarm Type with 'Override Mute' = Off  (Also used always for Missed Reading alarms which use the iOS volume.)  Press one of the volume buttons to stop the sound, then change the volume with the volume buttons to the desired volume and test again.
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func volumeTestiOSSoundExplanation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("volumeTestiOSSoundExplanation", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "volumeTestiOSSoundExplanation"
        }

        return NSLocalizedString("volumeTestiOSSoundExplanation", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: An alarm sound is now being played with the same volume that will be used for an Alarm Type with 'Override Mute' = On  (Used for all alarms except Missed Reading alerts which always use the iOS volume.)  Change the volume with the volume buttons and press OK when done.
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func volumeTestSoundPlayerExplanation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("volumeTestSoundPlayerExplanation", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "volumeTestSoundPlayerExplanation"
        }

        return NSLocalizedString("volumeTestSoundPlayerExplanation", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Apple Health
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_sectiontitlehealthkit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_sectiontitlehealthkit", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_sectiontitlehealthkit"
        }

        return NSLocalizedString("settingsviews_sectiontitlehealthkit", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Apple Watch
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func appleWatchSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("appleWatchSectionTitle", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "appleWatchSectionTitle"
        }

        return NSLocalizedString("appleWatchSectionTitle", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Background Color
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func m5stack_settingsviews_backGroundColor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m5stack_settingsviews_backGroundColor", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "m5stack_settingsviews_backGroundColor"
        }

        return NSLocalizedString("m5stack_settingsviews_backGroundColor", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Blood Glucose Units:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_selectbgunit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_selectbgunit", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_selectbgunit"
        }

        return NSLocalizedString("settingsviews_selectbgunit", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Bluetooth
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func m5stack_settingsviews_sectiontitlebluetooth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m5stack_settingsviews_sectiontitlebluetooth", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "m5stack_settingsviews_sectiontitlebluetooth"
        }

        return NSLocalizedString("m5stack_settingsviews_sectiontitlebluetooth", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Build:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_build(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_build", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_build"
        }

        return NSLocalizedString("settingsviews_build", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Calendar To Use?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func calenderId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("calenderId", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "calenderId"
        }

        return NSLocalizedString("calenderId", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Change: 
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func editScheduleTimePickerSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editScheduleTimePickerSubtitle", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "editScheduleTimePickerSubtitle"
        }

        return NSLocalizedString("editScheduleTimePickerSubtitle", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Create Calendar Events?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func createCalendarEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("createCalendarEvent", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "createCalendarEvent"
        }

        return NSLocalizedString("createCalendarEvent", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Days to Calculate?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_daysToUseStatisticsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_daysToUseStatisticsTitle", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_daysToUseStatisticsTitle"
        }

        return NSLocalizedString("settingsviews_daysToUseStatisticsTitle", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Developer Settings
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func developerSettings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("developerSettings", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "developerSettings"
        }

        return NSLocalizedString("developerSettings", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Dexcom Share
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_sectiontitledexcomshare(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_sectiontitledexcomshare", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_sectiontitledexcomshare"
        }

        return NSLocalizedString("settingsviews_sectiontitledexcomshare", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Display Delta?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func displayDeltaInCalendarEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("displayDeltaInCalendarEvent", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "displayDeltaInCalendarEvent"
        }

        return NSLocalizedString("displayDeltaInCalendarEvent", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Display Trend?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_displayTrendInCalendarEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_displayTrendInCalendarEvent", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_displayTrendInCalendarEvent"
        }

        return NSLocalizedString("settingsviews_displayTrendInCalendarEvent", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Display Unit?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func displayUnitInCalendarEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("displayUnitInCalendarEvent", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "displayUnitInCalendarEvent"
        }

        return NSLocalizedString("displayUnitInCalendarEvent", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Dots 5 Mins Apart
      ///
      /// Locales: en, zh
      static func settingsviews_chartDots5MinsApart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_chartDots5MinsApart", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_chartDots5MinsApart"
        }

        return NSLocalizedString("settingsviews_chartDots5MinsApart", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Enable Multi-point Calibration
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_nonfixedtransmitter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_nonfixedtransmitter", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_nonfixedtransmitter"
        }

        return NSLocalizedString("settingsviews_nonfixedtransmitter", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Enable Nightscout?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_nightScoutEnabled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_nightScoutEnabled", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_nightScoutEnabled"
        }

        return NSLocalizedString("settingsviews_nightScoutEnabled", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Enter Bluetooth Password
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func m5stack_settingsviews_giveBluetoothPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m5stack_settingsviews_giveBluetoothPassword", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "m5stack_settingsviews_giveBluetoothPassword"
        }

        return NSLocalizedString("m5stack_settingsviews_giveBluetoothPassword", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Enter Dexcom Share Account Name
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_giveDexcomShareAccountName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_giveDexcomShareAccountName", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_giveDexcomShareAccountName"
        }

        return NSLocalizedString("settingsviews_giveDexcomShareAccountName", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Enter Transmitter ID
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_givetransmitterid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_givetransmitterid", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_givetransmitterid"
        }

        return NSLocalizedString("settingsviews_givetransmitterid", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Enter the Dexcom Receiver Serial Number
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_giveDexcomShareSerialNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_giveDexcomShareSerialNumber", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_giveDexcomShareSerialNumber"
        }

        return NSLocalizedString("settingsviews_giveDexcomShareSerialNumber", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Enter your API_SECRET
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_giveNightScoutAPIKey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_giveNightScoutAPIKey", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_giveNightScoutAPIKey"
        }

        return NSLocalizedString("settingsviews_giveNightScoutAPIKey", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Enter your NightScout URL
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_giveNightScoutUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_giveNightScoutUrl", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_giveNightScoutUrl"
        }

        return NSLocalizedString("settingsviews_giveNightScoutUrl", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Explain why you need to send the trace file with as much detail as possible. If you have already reported your problem in the Facebook support group '%@', then mention your facebook name in the e-mail
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func describeProblem(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("describeProblem", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "describeProblem"
        }

        let format = NSLocalizedString("describeProblem", tableName: "SettingsViews", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Failed to Send Email
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func failedToSendEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("failedToSendEmail", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "failedToSendEmail"
        }

        return NSLocalizedString("failedToSendEmail", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Follower
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_follower(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_follower", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_follower"
        }

        return NSLocalizedString("settingsviews_follower", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: General
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_sectiontitlegeneral(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_sectiontitlegeneral", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_sectiontitlegeneral"
        }

        return NSLocalizedString("settingsviews_sectiontitlegeneral", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Give Dexcom Share Password
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_giveDexcomSharePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_giveDexcomSharePassword", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_giveDexcomSharePassword"
        }

        return NSLocalizedString("settingsviews_giveDexcomSharePassword", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: HbA1c in mmols/mol
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_useIFCCA1C(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_useIFCCA1C", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_useIFCCA1C"
        }

        return NSLocalizedString("settingsviews_useIFCCA1C", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: High Value:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_highValue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_highValue", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_highValue"
        }

        return NSLocalizedString("settingsviews_highValue", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Home Screen
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_sectiontitlehomescreen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_sectiontitlehomescreen", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_sectiontitlehomescreen"
        }

        return NSLocalizedString("settingsviews_sectiontitlehomescreen", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Include Debug Level
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func debugLevel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("debugLevel", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "debugLevel"
        }

        return NSLocalizedString("debugLevel", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Interval:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_IntervalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_IntervalTitle", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_IntervalTitle"
        }

        return NSLocalizedString("settingsviews_IntervalTitle", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Issue Reporting
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func sectionTitleTrace(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sectionTitleTrace", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "sectionTitleTrace"
        }

        return NSLocalizedString("sectionTitleTrace", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Language:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_speakBgReadingslanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_speakBgReadingslanguage", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_speakBgReadingslanguage"
        }

        return NSLocalizedString("settingsviews_speakBgReadingslanguage", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: License
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_license(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_license", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_license"
        }

        return NSLocalizedString("settingsviews_license", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Low Value:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_lowValue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_lowValue", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_lowValue"
        }

        return NSLocalizedString("settingsviews_lowValue", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: M5 Stack Settings
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func m5stack_settingsviews_settingstitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m5stack_settingsviews_settingstitle", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "m5stack_settingsviews_settingstitle"
        }

        return NSLocalizedString("m5stack_settingsviews_settingstitle", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Master
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_master(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_master", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_master"
        }

        return NSLocalizedString("settingsviews_master", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Master or Follower?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_masterorfollower(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_masterorfollower", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_masterorfollower"
        }

        return NSLocalizedString("settingsviews_masterorfollower", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Maximum days we should try to use to calculate the statistics?  (Enter 0 to calculate today since midnight)
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_daysToUseStatisticsMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_daysToUseStatisticsMessage", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_daysToUseStatisticsMessage"
        }

        return NSLocalizedString("settingsviews_daysToUseStatisticsMessage", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Minimum interval between two readings, in minutes
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_IntervalMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_IntervalMessage", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_IntervalMessage"
        }

        return NSLocalizedString("settingsviews_IntervalMessage", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: More
      ///
      /// Locales: en, zh
      static func sectionTitleMore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sectionTitleMore", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "sectionTitleMore"
        }

        return NSLocalizedString("sectionTitleMore", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: More Settings
      ///
      /// Locales: en, zh
      static func moreSettings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("moreSettings", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "moreSettings"
        }

        return NSLocalizedString("moreSettings", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Multi-point Calibration
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_labelNonFixed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_labelNonFixed", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_labelNonFixed"
        }

        return NSLocalizedString("settingsviews_labelNonFixed", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Multiply App Badge Reading by 10?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_multipleAppBadgeValueWith10(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_multipleAppBadgeValueWith10", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_multipleAppBadgeValueWith10"
        }

        return NSLocalizedString("settingsviews_multipleAppBadgeValueWith10", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: NSLog
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func nslog(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nslog", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "nslog"
        }

        return NSLocalizedString("nslog", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: NightScout
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_sectiontitlenightscout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_sectiontitlenightscout", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_sectiontitlenightscout"
        }

        return NSLocalizedString("settingsviews_sectiontitlenightscout", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: OSLog
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func oslog(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oslog", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "oslog"
        }

        return NSLocalizedString("oslog", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: On/Off Time Schedule for 
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func timeScheduleViewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("timeScheduleViewTitle", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "timeScheduleViewTitle"
        }

        return NSLocalizedString("timeScheduleViewTitle", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Port (optional):
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func nightScoutPort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nightScoutPort", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "nightScoutPort"
        }

        return NSLocalizedString("nightScoutPort", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Problem Description: 
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func emailbodyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emailbodyText", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "emailbodyText"
        }

        return NSLocalizedString("emailbodyText", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Receiver Serial Number:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_dexcomShareSerialNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_dexcomShareSerialNumber", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_dexcomShareSerialNumber"
        }

        return NSLocalizedString("settingsviews_dexcomShareSerialNumber", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Reset Transmitter
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_resettransmitter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_resettransmitter", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_resettransmitter"
        }

        return NSLocalizedString("settingsviews_resettransmitter", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Schedule:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func schedule(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("schedule", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "schedule"
        }

        return NSLocalizedString("schedule", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Screen Brightness
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func m5stack_settingsviews_brightness(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m5stack_settingsviews_brightness", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "m5stack_settingsviews_brightness"
        }

        return NSLocalizedString("m5stack_settingsviews_brightness", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Select Language
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_speakreadingslanguageselection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_speakreadingslanguageselection", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_speakreadingslanguageselection"
        }

        return NSLocalizedString("settingsviews_speakreadingslanguageselection", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Send Issue Report
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func sendTraceFile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sendTraceFile", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "sendTraceFile"
        }

        return NSLocalizedString("sendTraceFile", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Sensor Countdown
      ///
      /// Locales: en, nl, pt, fr, de, es, sv
      static func settingsviews_sectiontitlesensorcountdown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_sectiontitlesensorcountdown", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_sectiontitlesensorcountdown"
        }

        return NSLocalizedString("settingsviews_sectiontitlesensorcountdown", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_settingstitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_settingstitle", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_settingstitle"
        }

        return NSLocalizedString("settingsviews_settingstitle", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Show BG in Notifications?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_showReadingInNotification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_showReadingInNotification", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_showReadingInNotification"
        }

        return NSLocalizedString("settingsviews_showReadingInNotification", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Show BG in the App Badge?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_labelShowReadingInAppBadge(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_labelShowReadingInAppBadge", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_labelShowReadingInAppBadge"
        }

        return NSLocalizedString("settingsviews_labelShowReadingInAppBadge", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Show Clock when Locked?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_showClockWhenScreenIsLocked(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_showClockWhenScreenIsLocked", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_showClockWhenScreenIsLocked"
        }

        return NSLocalizedString("settingsviews_showClockWhenScreenIsLocked", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Show Colored Lines?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_showcoloredobjectives(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_showcoloredobjectives", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_showcoloredobjectives"
        }

        return NSLocalizedString("settingsviews_showcoloredobjectives", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Show Objectives in Graph?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_useobjectives(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_useobjectives", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_useobjectives"
        }

        return NSLocalizedString("settingsviews_useobjectives", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Show Sensor Countdown?
      ///
      /// Locales: en, nl, pt, fr, de, es, sv
      static func settingsviews_showSensorCountdown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_showSensorCountdown", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_showSensorCountdown"
        }

        return NSLocalizedString("settingsviews_showSensorCountdown", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Show Statistics?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_showStatistics(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_showStatistics", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_showStatistics"
        }

        return NSLocalizedString("settingsviews_showStatistics", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Smooth Libre Values?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func smoothLibreValues(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("smoothLibreValues", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "smoothLibreValues"
        }

        return NSLocalizedString("smoothLibreValues", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Speak BG Readings?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_speakBgReadings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_speakBgReadings", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_speakBgReadings"
        }

        return NSLocalizedString("settingsviews_speakBgReadings", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Speak Delta?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_speakDelta(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_speakDelta", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_speakDelta"
        }

        return NSLocalizedString("settingsviews_speakDelta", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Speak Trend?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_speakTrend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_speakTrend", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_speakTrend"
        }

        return NSLocalizedString("settingsviews_speakTrend", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Statistics
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_sectiontitlestatistics(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_sectiontitlestatistics", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_sectiontitlestatistics"
        }

        return NSLocalizedString("settingsviews_sectiontitlestatistics", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Switching from master to follower will stop your current sensor. Do you want to continue?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func warningChangeFromMasterToFollower(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("warningChangeFromMasterToFollower", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "warningChangeFromMasterToFollower"
        }

        return NSLocalizedString("warningChangeFromMasterToFollower", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Test Connection?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func testUrlAndAPIKey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("testUrlAndAPIKey", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "testUrlAndAPIKey"
        }

        return NSLocalizedString("testUrlAndAPIKey", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Test Volume (Current iPhone Volume)
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func volumeTestiOSSound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("volumeTestiOSSound", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "volumeTestiOSSound"
        }

        return NSLocalizedString("volumeTestiOSSound", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Test Volume (if Override Mute On)
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func volumeTestSoundPlayer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("volumeTestSoundPlayer", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "volumeTestSoundPlayer"
        }

        return NSLocalizedString("volumeTestSoundPlayer", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Text Color
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func m5stack_settingsviews_textColor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m5stack_settingsviews_textColor", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "m5stack_settingsviews_textColor"
        }

        return NSLocalizedString("m5stack_settingsviews_textColor", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Transmitter
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_sectiontitletransmitter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_sectiontitletransmitter", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_sectiontitletransmitter"
        }

        return NSLocalizedString("settingsviews_sectiontitletransmitter", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Transmitter ID
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_transmitterid_text_for_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_transmitterid_text_for_button", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_transmitterid_text_for_button"
        }

        return NSLocalizedString("settingsviews_transmitterid_text_for_button", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Transmitter ID:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_transmitterid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_transmitterid", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_transmitterid"
        }

        return NSLocalizedString("settingsviews_transmitterid", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Transmitter Type:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_transmittertype(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_transmittertype", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_transmittertype"
        }

        return NSLocalizedString("settingsviews_transmittertype", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Transmitters with ID 8Gxxxx or newer are not currently supported!
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func transmitterId8OrHigherNotSupported(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transmitterId8OrHigherNotSupported", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "transmitterId8OrHigherNotSupported"
        }

        return NSLocalizedString("transmitterId8OrHigherNotSupported", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: URL:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_nightScoutUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_nightScoutUrl", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_nightScoutUrl"
        }

        return NSLocalizedString("settingsviews_nightScoutUrl", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Upload Sensor Start Time?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func uploadSensorStartTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uploadSensorStartTime", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "uploadSensorStartTime"
        }

        return NSLocalizedString("uploadSensorStartTime", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Upload to Dexcom Share?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_uploadReadingstoDexcomShare(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_uploadReadingstoDexcomShare", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_uploadReadingstoDexcomShare"
        }

        return NSLocalizedString("settingsviews_uploadReadingstoDexcomShare", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Urgent High Value:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_urgentHighValue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_urgentHighValue", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_urgentHighValue"
        }

        return NSLocalizedString("settingsviews_urgentHighValue", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Urgent Low Value:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_urgentLowValue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_urgentLowValue", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_urgentLowValue"
        }

        return NSLocalizedString("settingsviews_urgentLowValue", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Use Alternative Graphics?
      ///
      /// Locales: en, nl, pt, fr, de, es, sv
      static func settingsviews_showSensorCountdownAlternativeGraphics(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_showSensorCountdownAlternativeGraphics", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_showSensorCountdownAlternativeGraphics"
        }

        return NSLocalizedString("settingsviews_showSensorCountdownAlternativeGraphics", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Use Dexcom US Servers?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_useUSDexcomShareurl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_useUSDexcomShareurl", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_useUSDexcomShareurl"
        }

        return NSLocalizedString("settingsviews_useUSDexcomShareurl", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Use Libre Algorithm
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_webooptransmitter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_webooptransmitter", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_webooptransmitter"
        }

        return NSLocalizedString("settingsviews_webooptransmitter", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Use Standard Range
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_useStandardStatisticsRange(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_useStandardStatisticsRange", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_useStandardStatisticsRange"
        }

        return NSLocalizedString("settingsviews_useStandardStatisticsRange", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Use Upload Schedule?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_useSchedule(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_useSchedule", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_useSchedule"
        }

        return NSLocalizedString("settingsviews_useSchedule", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Version:
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_Version(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_Version", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_Version"
        }

        return NSLocalizedString("settingsviews_Version", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Voice
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_sectiontitlespeak(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_sectiontitlespeak", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_sectiontitlespeak"
        }

        return NSLocalizedString("settingsviews_sectiontitlespeak", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: Write Data to Apple Health?
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_healthkit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_healthkit", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_healthkit"
        }

        return NSLocalizedString("settingsviews_healthkit", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: You cannot give authorization to %@ to access your calendar. This is possibly due to active restrictions such as parental controls being in place.
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func infoCalendarAccessRestricted(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("infoCalendarAccessRestricted", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "infoCalendarAccessRestricted"
        }

        let format = NSLocalizedString("infoCalendarAccessRestricted", tableName: "SettingsViews", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: You must configure an e-mail account on your iOS device.
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func emailNotConfigured(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emailNotConfigured", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "emailNotConfigured"
        }

        return NSLocalizedString("emailNotConfigured", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: You previously denied access to your Calendar.  To enable it go to your device settings, privacy, calendars and enable it.
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func infoCalendarAccessDeniedByUser(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("infoCalendarAccessDeniedByUser", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "infoCalendarAccessDeniedByUser"
        }

        return NSLocalizedString("infoCalendarAccessDeniedByUser", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      /// en translation: xDrip or Libre Algorithm
      ///
      /// Locales: en, nl, zh, pt, ar, fr, fi, de, es, it, pl-PL, ru, sl, sv
      static func settingsviews_labelWebOOP(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settingsviews_labelWebOOP", tableName: "SettingsViews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SettingsViews", preferredLanguages: preferredLanguages) else {
          return "settingsviews_labelWebOOP"
        }

        return NSLocalizedString("settingsviews_labelWebOOP", tableName: "SettingsViews", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.snooze` struct is generated, and contains static references to 2 localization keys.
    struct snooze {
      /// en translation: Not snoozed
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let not_snoozed = Rswift.StringResource(key: "not_snoozed", tableName: "Snooze", bundle: R.hostingBundle, locales: ["en", "fi", "pt", "nl", "ar", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)
      /// en translation: Snoozed until
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static let snoozed_until = Rswift.StringResource(key: "snoozed_until", tableName: "Snooze", bundle: R.hostingBundle, locales: ["en", "fi", "pt", "nl", "ar", "de", "es", "fr", "it", "pl-PL", "ru", "sl", "zh", "sv"], comment: nil)

      /// en translation: Not snoozed
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func not_snoozed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("not_snoozed", tableName: "Snooze", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Snooze", preferredLanguages: preferredLanguages) else {
          return "not_snoozed"
        }

        return NSLocalizedString("not_snoozed", tableName: "Snooze", bundle: bundle, comment: "")
      }

      /// en translation: Snoozed until
      ///
      /// Locales: en, fi, pt, nl, ar, de, es, fr, it, pl-PL, ru, sl, zh, sv
      static func snoozed_until(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("snoozed_until", tableName: "Snooze", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Snooze", preferredLanguages: preferredLanguages) else {
          return "snoozed_until"
        }

        return NSLocalizedString("snoozed_until", tableName: "Snooze", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.speakReading` struct is generated, and contains static references to 14 localization keys.
    struct speakReading {
      /// en translation: Difference from last reading is
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static let currentdelta = Rswift.StringResource(key: "currentdelta", tableName: "SpeakReading", bundle: R.hostingBundle, locales: ["en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "pt", "ar", "fi", "de", "es", "sv"], comment: nil)
      /// en translation: It's trending
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static let currenttrend = Rswift.StringResource(key: "currenttrend", tableName: "SpeakReading", bundle: R.hostingBundle, locales: ["en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "pt", "ar", "fi", "de", "es", "sv"], comment: nil)
      /// en translation: Your current blood glucose is
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static let currentglucose = Rswift.StringResource(key: "currentglucose", tableName: "SpeakReading", bundle: R.hostingBundle, locales: ["en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "pt", "ar", "fi", "de", "es", "sv"], comment: nil)
      /// en translation: down
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static let trendfortyfivedown = Rswift.StringResource(key: "trendfortyfivedown", tableName: "SpeakReading", bundle: R.hostingBundle, locales: ["en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "pt", "ar", "fi", "de", "es", "sv"], comment: nil)
      /// en translation: dramatically downward
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static let trenddoubledown = Rswift.StringResource(key: "trenddoubledown", tableName: "SpeakReading", bundle: R.hostingBundle, locales: ["en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "pt", "ar", "fi", "de", "es", "sv"], comment: nil)
      /// en translation: dramatically upward
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static let trenddoubleup = Rswift.StringResource(key: "trenddoubleup", tableName: "SpeakReading", bundle: R.hostingBundle, locales: ["en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "pt", "ar", "fi", "de", "es", "sv"], comment: nil)
      /// en translation: flat
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static let trendflat = Rswift.StringResource(key: "trendflat", tableName: "SpeakReading", bundle: R.hostingBundle, locales: ["en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "pt", "ar", "fi", "de", "es", "sv"], comment: nil)
      /// en translation: high
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static let high = Rswift.StringResource(key: "high", tableName: "SpeakReading", bundle: R.hostingBundle, locales: ["en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "pt", "ar", "fi", "de", "es", "sv"], comment: nil)
      /// en translation: low
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static let low = Rswift.StringResource(key: "low", tableName: "SpeakReading", bundle: R.hostingBundle, locales: ["en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "pt", "ar", "fi", "de", "es", "sv"], comment: nil)
      /// en translation: non computable
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static let deltanoncomputable = Rswift.StringResource(key: "deltanoncomputable", tableName: "SpeakReading", bundle: R.hostingBundle, locales: ["en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "pt", "ar", "fi", "de", "es", "sv"], comment: nil)
      /// en translation: non computable
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static let trendnoncomputable = Rswift.StringResource(key: "trendnoncomputable", tableName: "SpeakReading", bundle: R.hostingBundle, locales: ["en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "pt", "ar", "fi", "de", "es", "sv"], comment: nil)
      /// en translation: significantly downward
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static let trendsingledown = Rswift.StringResource(key: "trendsingledown", tableName: "SpeakReading", bundle: R.hostingBundle, locales: ["en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "pt", "ar", "fi", "de", "es", "sv"], comment: nil)
      /// en translation: significantly upward
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static let trendsingleup = Rswift.StringResource(key: "trendsingleup", tableName: "SpeakReading", bundle: R.hostingBundle, locales: ["en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "pt", "ar", "fi", "de", "es", "sv"], comment: nil)
      /// en translation: up
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static let trendfortyfiveup = Rswift.StringResource(key: "trendfortyfiveup", tableName: "SpeakReading", bundle: R.hostingBundle, locales: ["en", "nl", "sl", "ru", "pl-PL", "it", "fr", "zh", "pt", "ar", "fi", "de", "es", "sv"], comment: nil)

      /// en translation: Difference from last reading is
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static func currentdelta(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("currentdelta", tableName: "SpeakReading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SpeakReading", preferredLanguages: preferredLanguages) else {
          return "currentdelta"
        }

        return NSLocalizedString("currentdelta", tableName: "SpeakReading", bundle: bundle, comment: "")
      }

      /// en translation: It's trending
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static func currenttrend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("currenttrend", tableName: "SpeakReading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SpeakReading", preferredLanguages: preferredLanguages) else {
          return "currenttrend"
        }

        return NSLocalizedString("currenttrend", tableName: "SpeakReading", bundle: bundle, comment: "")
      }

      /// en translation: Your current blood glucose is
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static func currentglucose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("currentglucose", tableName: "SpeakReading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SpeakReading", preferredLanguages: preferredLanguages) else {
          return "currentglucose"
        }

        return NSLocalizedString("currentglucose", tableName: "SpeakReading", bundle: bundle, comment: "")
      }

      /// en translation: down
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static func trendfortyfivedown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("trendfortyfivedown", tableName: "SpeakReading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SpeakReading", preferredLanguages: preferredLanguages) else {
          return "trendfortyfivedown"
        }

        return NSLocalizedString("trendfortyfivedown", tableName: "SpeakReading", bundle: bundle, comment: "")
      }

      /// en translation: dramatically downward
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static func trenddoubledown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("trenddoubledown", tableName: "SpeakReading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SpeakReading", preferredLanguages: preferredLanguages) else {
          return "trenddoubledown"
        }

        return NSLocalizedString("trenddoubledown", tableName: "SpeakReading", bundle: bundle, comment: "")
      }

      /// en translation: dramatically upward
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static func trenddoubleup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("trenddoubleup", tableName: "SpeakReading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SpeakReading", preferredLanguages: preferredLanguages) else {
          return "trenddoubleup"
        }

        return NSLocalizedString("trenddoubleup", tableName: "SpeakReading", bundle: bundle, comment: "")
      }

      /// en translation: flat
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static func trendflat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("trendflat", tableName: "SpeakReading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SpeakReading", preferredLanguages: preferredLanguages) else {
          return "trendflat"
        }

        return NSLocalizedString("trendflat", tableName: "SpeakReading", bundle: bundle, comment: "")
      }

      /// en translation: high
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static func high(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("high", tableName: "SpeakReading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SpeakReading", preferredLanguages: preferredLanguages) else {
          return "high"
        }

        return NSLocalizedString("high", tableName: "SpeakReading", bundle: bundle, comment: "")
      }

      /// en translation: low
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static func low(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("low", tableName: "SpeakReading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SpeakReading", preferredLanguages: preferredLanguages) else {
          return "low"
        }

        return NSLocalizedString("low", tableName: "SpeakReading", bundle: bundle, comment: "")
      }

      /// en translation: non computable
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static func deltanoncomputable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deltanoncomputable", tableName: "SpeakReading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SpeakReading", preferredLanguages: preferredLanguages) else {
          return "deltanoncomputable"
        }

        return NSLocalizedString("deltanoncomputable", tableName: "SpeakReading", bundle: bundle, comment: "")
      }

      /// en translation: non computable
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static func trendnoncomputable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("trendnoncomputable", tableName: "SpeakReading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SpeakReading", preferredLanguages: preferredLanguages) else {
          return "trendnoncomputable"
        }

        return NSLocalizedString("trendnoncomputable", tableName: "SpeakReading", bundle: bundle, comment: "")
      }

      /// en translation: significantly downward
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static func trendsingledown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("trendsingledown", tableName: "SpeakReading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SpeakReading", preferredLanguages: preferredLanguages) else {
          return "trendsingledown"
        }

        return NSLocalizedString("trendsingledown", tableName: "SpeakReading", bundle: bundle, comment: "")
      }

      /// en translation: significantly upward
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static func trendsingleup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("trendsingleup", tableName: "SpeakReading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SpeakReading", preferredLanguages: preferredLanguages) else {
          return "trendsingleup"
        }

        return NSLocalizedString("trendsingleup", tableName: "SpeakReading", bundle: bundle, comment: "")
      }

      /// en translation: up
      ///
      /// Locales: en, nl, sl, ru, pl-PL, it, fr, zh, pt, ar, fi, de, es, sv
      static func trendfortyfiveup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("trendfortyfiveup", tableName: "SpeakReading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SpeakReading", preferredLanguages: preferredLanguages) else {
          return "trendfortyfiveup"
        }

        return NSLocalizedString("trendfortyfiveup", tableName: "SpeakReading", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.watlaaView` struct is generated, and contains static references to 1 localization keys.
    struct watlaaView {
      /// en translation: Watlaa
      ///
      /// Locales: en, pt, nl, ar, de, es, fr, it, pl-PL, ru, zh, fi, sl, sv
      static let watlaaViewscreenTitle = Rswift.StringResource(key: "watlaaViewscreenTitle", tableName: "WatlaaView", bundle: R.hostingBundle, locales: ["en", "pt", "nl", "ar", "de", "es", "fr", "it", "pl-PL", "ru", "zh", "fi", "sl", "sv"], comment: nil)

      /// en translation: Watlaa
      ///
      /// Locales: en, pt, nl, ar, de, es, fr, it, pl-PL, ru, zh, fi, sl, sv
      static func watlaaViewscreenTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("watlaaViewscreenTitle", tableName: "WatlaaView", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "WatlaaView", preferredLanguages: preferredLanguages) else {
          return "watlaaViewscreenTitle"
        }

        return NSLocalizedString("watlaaViewscreenTitle", tableName: "WatlaaView", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _StatisticsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "StatisticsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = InitViewController

      let bluetoothPeripheral = StoryboardViewControllerResource<BluetoothPeripheralViewController>(identifier: "BluetoothPeripheral")
      let bundle = R.hostingBundle
      let datePickerViewController = StoryboardViewControllerResource<DatePickerViewController>(identifier: "DatePickerViewController")
      let mainTabBarController = StoryboardViewControllerResource<MainTabBarController>(identifier: "MainTabBarController")
      let name = "Main"
      let pickerViewController = StoryboardViewControllerResource<PickerViewController>(identifier: "PickerViewController")

      func bluetoothPeripheral(_: Void = ()) -> BluetoothPeripheralViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bluetoothPeripheral)
      }

      func datePickerViewController(_: Void = ()) -> DatePickerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: datePickerViewController)
      }

      func mainTabBarController(_: Void = ()) -> MainTabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBarController)
      }

      func pickerViewController(_: Void = ()) -> PickerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pickerViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_alarm", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_alarm' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_clock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_clock' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_pushpin_unlock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_pushpin_unlock' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_statistics", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_statistics' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_bloodsugar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_bloodsugar' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_bloodsugar_h", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_bloodsugar_h' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_bluetooth", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_bluetooth' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_bluetooth_h", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_bluetooth_h' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_settings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_settings' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_settings_h", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_settings_h' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "link.circle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'link.circle' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "logo-launchScreen.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo-launchScreen.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "scope") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'scope' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "sensor14_14_alt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sensor14_14_alt' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().bluetoothPeripheral() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bluetoothPeripheral' could not be loaded from storyboard 'Main' as 'BluetoothPeripheralViewController'.") }
        if _R.storyboard.main().datePickerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'datePickerViewController' could not be loaded from storyboard 'Main' as 'DatePickerViewController'.") }
        if _R.storyboard.main().mainTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBarController' could not be loaded from storyboard 'Main' as 'MainTabBarController'.") }
        if _R.storyboard.main().pickerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pickerViewController' could not be loaded from storyboard 'Main' as 'PickerViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
